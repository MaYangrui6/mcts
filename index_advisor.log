2024-03-06 19:44:53,763 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:44:53,844 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:44:53,893 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:44:53,950 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:53,972 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:53,988 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,011 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,026 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,044 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,057 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,070 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,083 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,095 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,107 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,119 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,131 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,144 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,156 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,168 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,180 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,192 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,205 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,220 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,233 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,246 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,259 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,272 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,285 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,298 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,311 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,323 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,335 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,347 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,360 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,373 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,386 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,399 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,412 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,425 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,438 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,450 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,463 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,475 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,487 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,499 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,511 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,523 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,535 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,547 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,559 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,571 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,584 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,596 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,608 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,620 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,632 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,644 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,656 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,668 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,681 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,693 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,704 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,716 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,728 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,741 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,754 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,766 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,779 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,791 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,803 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,815 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,828 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,840 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,852 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,864 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,876 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,888 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,900 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,912 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,924 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,937 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,950 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,963 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,975 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:54,988 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,001 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,013 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,026 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,039 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,051 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,064 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,076 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,089 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,102 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,114 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,127 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,139 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,152 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,164 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,177 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,190 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,203 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,216 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,229 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,242 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,254 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,267 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,280 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,293 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,306 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,320 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,332 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,345 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,357 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,369 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,381 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,393 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,406 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,418 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,430 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,442 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,455 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,467 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,479 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,491 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,503 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,530 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,534 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,539 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,542 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,545 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,548 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,551 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,554 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,557 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,560 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,563 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,566 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,569 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,572 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,576 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,579 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,582 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,585 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,588 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,591 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,594 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,597 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,600 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,603 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,607 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,609 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,612 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,623 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,626 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,630 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,632 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,633 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,635 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,637 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,639 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,641 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,648 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,651 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,653 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,655 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,674 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,676 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,680 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,681 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,683 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,691 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,693 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,696 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,698 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,699 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,711 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,714 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,717 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,720 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,722 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,744 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,747 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,749 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,751 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:44:55,759 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:44:55,759 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,759 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 19:44:55,760 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: item columns: i_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0,)],len==24
2024-03-06 19:44:57,007 - root - MCTS - INFO - mcts 100 >= 452.8515625
2024-03-06 19:44:57,007 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,105 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,177 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,226 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,270 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,310 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,340 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,368 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,392 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,416 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,438 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,461 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57882.58
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,462 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,463 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:44:57,464 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,464 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:44:57,464 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,464 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-06 19:44:57,465 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-06 19:44:57,465 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 19:44:57,465 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-06 19:44:57,465 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:44:57,465 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 19:44:57,465 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-06 19:44:57,466 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,466 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:44:57,466 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 19:44:57,466 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:44:57,466 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-06 19:44:57,467 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-06 19:44:57,467 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 19:44:57,467 - root - filter_low_benefit_index - INFO - table: customer columns: c_customer_sk index_type:  storage: 2.484375 has benefit of 1.5
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,467 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:44:57,467 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 19:44:57,467 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 19:44:57,468 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:44:57,468 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:44:57,468 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 19:44:57,468 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,468 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:44:57,469 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:44:57,469 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:44:57,469 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,469 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:44:57,470 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:44:57,470 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 19:44:57,470 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:44:57,470 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:44:57,470 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:44:57,470 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:44:57,470 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-06 19:44:57,471 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:44:57,471 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57882.59
2024-03-06 19:44:57,471 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-06 19:44:57,471 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 19:44:57,471 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 1.489999994635582
2024-03-06 19:44:57,480 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:44:57,552 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,552 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,552 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,552 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,552 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,552 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,553 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,554 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,555 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13385>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,556 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,557 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,558 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,559 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,560 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_month_seq"']
2024-03-06 19:44:57,561 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:44:57,561 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 19:44:57,561 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 784.4099999999999, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2026.060000000005]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2026.060000000005, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2144.5599999999977]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2144.5599999999977]
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 19:44:57,562 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2026.060000000005]
2024-03-06 19:44:57,562 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 19:44:57,570 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:44:57,570 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 19:44:57,571 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 19:45:33,910 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:45:33,991 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:45:34,037 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:45:34,089 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,110 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,125 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,148 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,164 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,176 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,188 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,201 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,213 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,225 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,238 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,250 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,263 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,276 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,288 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,301 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,313 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,325 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,338 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,352 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,364 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,377 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,390 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,403 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,415 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,428 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,440 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,452 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,465 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,477 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,490 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,503 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,516 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,528 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,541 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,553 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,565 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,578 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,590 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,604 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,617 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,630 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,643 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,656 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,669 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,682 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,694 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,707 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,719 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,731 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,744 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,756 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,768 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,780 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,792 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,804 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,816 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,828 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,840 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,854 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,868 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,893 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,906 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,918 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,931 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,943 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,956 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,968 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,981 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:34,994 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,007 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,019 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,031 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,044 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,056 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,068 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,081 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,093 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,106 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,119 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,131 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,144 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,156 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,169 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,193 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,206 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,218 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,230 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,243 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,255 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,267 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,280 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,292 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,305 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,317 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,330 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,342 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,355 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,367 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,380 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,392 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,404 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,416 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,429 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,441 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,454 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,466 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,479 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,491 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,503 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,515 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,528 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,541 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,553 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,566 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,579 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,592 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,604 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,617 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,630 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,643 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,668 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,672 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,677 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,680 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,683 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,686 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,689 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,692 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,695 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,698 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,701 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,704 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,707 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,710 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,713 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,715 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,718 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,721 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,724 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,727 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,730 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,733 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,736 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,738 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,741 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,744 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,747 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,757 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,759 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,763 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,765 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,767 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,769 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,771 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,773 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,775 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,782 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,784 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,786 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,788 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,806 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,808 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,811 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,813 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,814 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,822 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,823 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,825 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,827 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,828 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,840 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,843 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,846 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,848 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,850 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,873 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,876 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,878 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 19:45:35,888 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:45:35,888 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 19:45:35,888 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,888 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,888 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,888 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,888 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,889 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,889 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,889 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 19:45:35,889 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: item columns: i_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0,)],len==24
2024-03-06 19:45:37,211 - root - MCTS - INFO - mcts 300 >= 452.8515625
2024-03-06 19:45:37,211 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:37,367 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:37,500 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:37,617 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:37,731 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:37,820 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:37,908 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:37,988 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:38,064 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:38,136 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:38,206 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,273 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :54162.37
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :10643.82
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-06 19:45:38,274 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,275 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 19:45:38,276 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,276 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-06 19:45:38,277 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-06 19:45:38,277 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 19:45:38,277 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-06 19:45:38,278 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:45:38,278 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 19:45:38,278 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-06 19:45:38,278 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 19:45:38,279 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 19:45:38,279 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125 has benefit of 3728.079999998212
2024-03-06 19:45:38,279 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,279 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:45:38,279 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,279 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:45:38,279 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,279 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:45:38,279 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:45:38,279 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 19:45:38,280 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:45:38,280 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:45:38,280 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:45:38,280 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,280 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-06 19:45:38,281 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 19:45:38,281 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 19:45:38,281 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,281 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:45:38,282 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:45:38,282 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 19:45:38,282 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-06 19:45:38,282 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 19:45:38,282 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:45:38,282 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19483.98
2024-03-06 19:45:38,282 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57848.57
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 19:45:38,283 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 19:45:38,283 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 19:45:38,283 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125 has benefit of 1368.0099999904633
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 19:45:38,283 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-06 19:45:38,284 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 19:45:38,284 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-06 19:45:38,284 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 19:45:38,284 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 19:45:38,284 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 19:45:38,284 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:45:38,284 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-06 19:45:38,290 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,364 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,365 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,366 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13387>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,367 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,368 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,369 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,370 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,371 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,372 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,373 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-06 19:45:38,374 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 19:45:38,374 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 19:45:38,374 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-06 19:45:38,374 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 19:45:38,374 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 19:45:38,374 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 19:45:38,374 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 790.7800000000007, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 1051.3099999999995, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 790.7800000000007]
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 19:45:38,375 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 19:45:38,375 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 19:45:38,381 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:45:38,382 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 19:45:38,382 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 19:59:54,629 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:59:55,352 - root - __init_conn_handle - INFO - connection successful
2024-03-06 19:59:55,366 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-06 19:59:55,368 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 19:59:55,369 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 19:59:55,370 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-06 19:59:55,376 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:00:07,791 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:00:31,032 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:02:57,584 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:02:58,341 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:02:58,356 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-06 20:02:58,358 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:02:58,360 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:02:58,360 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-06 20:02:58,370 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:04:04,707 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:10,408 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,513 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:04:27,579 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:04:27,593 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-06 20:04:27,594 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:04:27,594 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:04:27,594 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-06 20:04:27,600 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:04:27,666 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,686 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,700 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,723 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,735 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,752 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,766 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,779 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,792 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,806 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,826 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,839 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,853 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,867 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,893 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,907 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,921 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,934 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,948 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,964 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,980 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:27,993 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,006 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,020 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,033 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,046 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,059 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,071 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,084 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,096 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,108 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,121 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,134 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,146 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,159 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,172 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,184 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,197 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,210 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,223 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,235 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,248 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,261 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,273 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,285 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,297 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,309 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,322 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,334 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,346 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,358 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,371 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,384 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,397 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,409 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,433 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,445 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,457 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,471 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,483 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,494 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,506 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,517 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,528 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,540 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,551 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,562 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,574 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,585 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,596 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,608 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,619 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,631 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,642 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,654 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,666 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,678 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,690 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,702 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,715 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,728 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,740 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,753 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,766 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,779 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,792 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,805 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,818 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,831 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,845 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,858 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,871 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,884 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,897 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,911 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,924 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,937 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,949 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,962 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,975 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:28,988 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,001 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,014 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,026 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,040 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,053 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,066 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,078 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,091 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,103 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,116 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,129 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,141 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,154 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,167 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,179 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,192 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,204 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,217 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,230 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,242 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:04:29,260 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:04:29,260 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 20:04:29,260 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:04:29,260 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==10
2024-03-06 20:04:30,747 - root - MCTS - INFO - mcts 100 >= 176.6328125
2024-03-06 20:04:30,747 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-06 20:04:30,766 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-06 20:04:30,781 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-06 20:04:30,799 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-06 20:04:30,821 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-06 20:04:30,838 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:04:30,838 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-06 20:04:30,839 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:04:30,840 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:04:30,840 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.5299999999997
2024-03-06 20:04:30,840 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:04:30,840 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-06 20:04:30,840 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:04:30,840 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:04:30,840 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 0.25
2024-03-06 20:04:30,841 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:04:30,841 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9608.89
2024-03-06 20:04:30,841 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:04:30,841 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:04:30,841 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875 has benefit of 270.5100000000002
2024-03-06 20:04:30,841 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:04:30,841 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-06 20:04:30,841 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:04:30,842 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:04:30,842 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 0.5
2024-03-06 20:04:30,848 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:04:31,000 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13384>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13383>btree_item_i_item_sk"']
2024-03-06 20:04:31,000 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:04:31,000 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13384>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13383>btree_item_i_item_sk"']
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:04:31,001 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13384>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13383>btree_item_i_item_sk"']
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13384>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13383>btree_item_i_item_sk"']
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:04:31,002 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:04:31,002 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: item columns: i_item_sk index_type:  storage: 0.4453125, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 2239.7999999999993]
2024-03-06 20:04:31,002 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:04:31,002 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: item columns: i_item_sk index_type:  storage: 0.4453125, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 2239.7999999999993]
2024-03-06 20:04:31,002 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:04:31,002 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: item columns: i_item_sk index_type:  storage: 0.4453125, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 2239.7999999999993]
2024-03-06 20:04:31,003 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:04:31,003 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: item columns: i_item_sk index_type:  storage: 0.4453125, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 2239.7999999999993]
2024-03-06 20:04:31,003 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 20:04:31,009 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:04:31,009 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 20:04:31,009 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 20:05:12,788 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:12,838 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:12,854 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-06 20:05:12,854 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:05:12,855 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:05:12,855 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-06 20:05:12,861 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:12,913 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:12,933 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:12,948 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:12,971 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:12,986 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,000 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,013 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,025 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,039 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,052 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,065 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,077 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,090 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,103 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,117 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,130 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,143 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,155 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,168 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,193 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,206 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,219 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,231 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,244 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,256 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,269 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,281 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,294 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,306 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,319 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,331 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,344 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,357 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,369 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,383 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,396 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,408 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,433 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,446 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,458 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,471 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,483 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,496 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,508 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,520 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,533 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,545 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,557 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,569 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,582 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,594 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,606 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,619 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,631 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,643 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,656 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,668 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,680 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,693 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,705 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,717 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,730 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,742 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,754 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,767 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,779 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,791 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,803 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,816 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,828 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,841 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,854 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,866 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,878 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,891 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,904 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,917 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,931 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,944 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,956 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,969 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,981 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:13,993 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,006 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,020 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,033 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,046 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,058 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,070 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,083 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,095 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,109 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,123 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,141 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,154 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,167 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,194 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,207 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,220 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,233 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,247 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,260 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,273 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,286 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,299 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,313 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,326 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,339 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,352 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,365 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,378 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,391 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,403 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,415 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,428 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,440 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,452 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,465 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,477 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,489 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:14,508 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:14,508 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 20:05:14,508 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:05:14,508 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==10
2024-03-06 20:05:14,955 - root - MCTS - INFO - mcts 300 >= 176.6328125
2024-03-06 20:05:14,956 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:05:14,956 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-06 20:05:14,957 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:05:14,957 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:05:14,958 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.5299999999997
2024-03-06 20:05:14,958 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:05:14,958 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9608.89
2024-03-06 20:05:14,958 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:05:14,958 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:05:14,958 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875 has benefit of 270.5100000000002
2024-03-06 20:05:14,959 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:05:14,959 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9741.99
2024-03-06 20:05:14,959 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:05:14,959 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 20:05:14,959 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125 has benefit of 137.40999999999985
2024-03-06 20:05:14,959 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:05:14,959 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-06 20:05:14,959 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:05:14,959 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:05:14,959 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 0.5
2024-03-06 20:05:14,959 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:05:14,960 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-06 20:05:14,960 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:05:14,960 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:05:14,960 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 0.25
2024-03-06 20:05:14,967 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:15,021 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:05:15,022 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:05:15,023 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:05:15,023 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:05:15,023 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:05:15,023 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:05:15,023 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:05:15,023 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 20:05:15,023 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:05:15,024 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:05:15,024 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:05:15,024 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:05:15,024 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:05:15,024 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 20:05:15,031 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:15,031 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 20:05:15,031 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 20:05:42,607 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:43,323 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:43,337 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-06 20:05:43,339 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:05:43,340 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:05:43,341 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-06 20:05:43,347 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:05:43,663 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,685 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,702 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,725 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,738 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,751 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,763 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,776 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,789 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,801 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,814 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,827 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,840 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,853 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,866 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,878 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,891 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,904 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,917 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,930 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,943 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,956 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,969 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,982 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:43,995 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,008 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,022 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,035 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,047 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,060 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,073 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,086 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,099 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,112 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,125 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,139 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,152 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,165 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,178 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,191 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,203 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,216 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,228 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,241 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,255 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,268 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,281 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,295 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,308 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,321 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,333 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,346 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,359 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,377 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,392 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,405 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,418 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,430 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,443 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,455 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,468 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,481 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,493 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,506 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,519 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,532 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,544 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,557 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,571 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,583 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,596 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,609 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,622 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,635 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,649 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,663 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,677 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,702 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,716 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,733 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,745 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,758 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,771 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,785 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,798 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,817 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,830 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,843 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,856 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,869 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,882 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,895 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,908 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,922 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,936 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,949 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,963 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,976 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:44,990 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,003 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,017 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,031 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,044 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,057 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,071 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,084 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,097 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,109 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,122 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,135 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,148 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,161 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,174 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,187 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,200 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,213 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,227 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,241 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,254 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,267 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,280 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,293 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:05:45,307 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:04,613 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:08:05,323 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:08:05,336 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-06 20:08:05,338 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:08:05,340 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:08:05,340 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-06 20:08:05,346 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:08:05,664 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,687 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,703 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,728 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,741 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,755 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,769 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,783 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,797 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,811 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,824 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,838 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,851 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,866 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,893 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,907 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,920 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,933 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,946 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,960 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,974 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:05,988 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,001 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,015 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,028 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,042 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,055 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,070 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,085 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,107 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,130 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,153 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,171 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,185 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,199 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,213 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,229 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,243 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,257 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,272 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,286 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,300 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,314 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,327 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,344 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,360 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,379 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,393 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,407 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,422 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,441 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,464 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,479 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,494 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,507 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,521 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,535 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,550 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,566 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,580 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,594 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,608 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,622 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,635 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,650 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,664 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,678 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,692 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,706 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,724 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,737 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,752 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,767 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,781 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,795 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,809 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,823 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,836 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,850 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,864 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,878 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,891 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,908 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,930 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,953 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,975 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:06,990 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,006 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,020 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,034 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,048 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,062 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,076 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,091 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,106 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,120 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,136 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,151 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,166 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,197 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,213 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,228 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,243 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,261 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,276 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,292 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,307 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,324 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,340 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,357 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,375 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,389 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,403 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,417 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,431 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,445 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,459 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,473 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,486 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,501 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:08:07,514 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,542 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:15,595 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:15,609 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-06 20:15:15,610 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:15:15,610 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-06 20:15:15,610 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-06 20:15:15,616 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:15,668 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,691 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,709 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,732 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,745 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,758 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,770 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,783 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,795 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,808 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,821 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,833 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,845 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,858 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,870 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,883 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,895 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,909 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,923 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,936 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,949 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,961 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,974 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,986 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:15,999 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,013 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,026 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,040 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,052 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,065 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,078 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,090 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,105 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,119 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,131 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,144 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,156 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,169 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,194 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,208 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,221 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,234 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,246 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,258 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,271 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,283 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,295 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,310 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,323 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,336 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,348 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,361 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,373 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,386 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,399 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,414 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,427 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,439 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,452 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,465 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,477 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,490 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,503 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,517 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,530 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,542 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,555 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,568 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,580 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,593 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,607 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,620 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,632 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,645 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,658 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,670 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,682 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,694 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,706 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,719 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,731 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,743 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,756 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,768 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,781 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,793 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,806 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,818 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,830 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,843 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,855 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,868 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,893 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,905 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,918 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,930 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,943 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,955 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,971 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,983 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:16,995 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,008 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,021 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,034 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,046 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,058 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,073 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,086 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,100 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,113 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,128 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,140 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,153 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,165 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,178 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,190 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,203 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,216 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,228 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,241 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,254 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:17,274 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:17,275 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 20:15:17,275 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:15:17,275 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==10
2024-03-06 20:15:17,704 - root - MCTS - INFO - mcts 300 >= 176.6328125
2024-03-06 20:15:17,706 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:17,706 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-06 20:15:17,706 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:17,707 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:15:17,707 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.5299999999997
2024-03-06 20:15:17,707 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:17,707 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9608.89
2024-03-06 20:15:17,707 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:17,707 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:15:17,707 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875 has benefit of 270.5100000000002
2024-03-06 20:15:17,707 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:17,707 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9741.99
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125 has benefit of 137.40999999999985
2024-03-06 20:15:17,708 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:17,708 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 0.5
2024-03-06 20:15:17,708 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:17,708 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:15:17,708 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 0.25
2024-03-06 20:15:17,715 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:17,760 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:15:17,760 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,761 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:17,762 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:15:17,762 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-06 20:15:17,762 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 20:15:17,769 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:17,770 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 20:15:17,770 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 20:15:37,477 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:37,562 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:37,610 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:37,671 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,695 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,711 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,735 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,749 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,762 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,776 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,790 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,804 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,817 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,831 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,844 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,857 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,870 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,883 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,896 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,910 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,922 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,935 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,948 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,961 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,974 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:37,987 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,000 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,013 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,026 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,039 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,051 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,064 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,078 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,091 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,104 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,117 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,130 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,143 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,155 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,168 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,194 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,207 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,220 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,232 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,245 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,258 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,270 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,284 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,298 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,311 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,324 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,337 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,349 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,362 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,374 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,387 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,399 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,411 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,424 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,439 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,452 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,465 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,479 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,492 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,504 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,517 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,530 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,543 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,555 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,567 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,579 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,592 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,604 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,617 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,629 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,642 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,654 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,666 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,679 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,691 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,704 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,717 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,729 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,741 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,753 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,765 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,777 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,789 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,801 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,813 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,826 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,838 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,850 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,862 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,874 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,886 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,898 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,910 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,923 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,935 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,948 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,960 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,973 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,986 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:38,998 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,010 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,022 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,035 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,047 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,059 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,072 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,084 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,096 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,108 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,121 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,134 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,146 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,158 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,170 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,182 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,195 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,207 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,219 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,231 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,242 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,268 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,272 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,277 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,280 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,283 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,286 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,290 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,293 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,297 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,300 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,303 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,306 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,309 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,312 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,315 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,318 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,321 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,324 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,327 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,330 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,333 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,336 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,339 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,342 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,345 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,348 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,351 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,362 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,364 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,367 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,369 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,371 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,372 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,374 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,376 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,378 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,384 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,387 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,389 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,391 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,410 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,413 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,417 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,419 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,429 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,431 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,433 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,435 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,436 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,448 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,451 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,454 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,456 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,458 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,481 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,483 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,486 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,487 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:15:39,495 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:39,496 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:15:39,496 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: item columns: i_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0,)],len==24
2024-03-06 20:15:40,890 - root - MCTS - INFO - mcts 300 >= 452.8515625
2024-03-06 20:15:40,890 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,045 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,178 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,294 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,407 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,496 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,579 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,656 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,729 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,801 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,870 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:15:41,936 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :54162.37
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:15:41,937 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :10643.82
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,938 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,939 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-06 20:15:41,940 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-06 20:15:41,940 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:15:41,940 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-06 20:15:41,941 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:41,941 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:15:41,941 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-06 20:15:41,942 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:15:41,942 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:15:41,942 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125 has benefit of 3728.079999998212
2024-03-06 20:15:41,942 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,942 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:15:41,942 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,942 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:15:41,942 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:15:41,943 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:41,943 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:15:41,943 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:15:41,943 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:41,943 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:15:41,943 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-06 20:15:41,943 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19483.98
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57848.57
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 20:15:41,944 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:15:41,944 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:15:41,944 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125 has benefit of 1368.0099999904633
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,944 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-06 20:15:41,945 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:15:41,945 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:15:41,945 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-06 20:15:41,945 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,946 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:15:41,946 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:15:41,946 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:15:41,946 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:41,946 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:15:41,946 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-06 20:15:41,946 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:15:41,947 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:15:41,947 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:15:41,947 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:15:41,947 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-06 20:15:41,954 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:42,040 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,041 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,042 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,043 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,044 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,045 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,046 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,047 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,048 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,049 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,050 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,051 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 20:15:42,052 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:15:42,052 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 1051.3099999999995, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 790.7800000000007]
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 790.7800000000007, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:15:42,053 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:15:42,053 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 20:15:42,061 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:15:42,061 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 20:15:42,061 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 20:20:38,636 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:20:39,693 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:20:39,745 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:33:27,439 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:33:28,460 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:33:28,506 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:34:23,089 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:34:23,203 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:34:23,254 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:34:23,330 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,353 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,369 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,411 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,437 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,452 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,464 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,477 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,489 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,502 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,514 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,526 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,539 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,563 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,576 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,589 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,601 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,613 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,626 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,638 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,650 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,663 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,675 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,687 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,699 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,711 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,723 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,735 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,747 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,759 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,771 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,783 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,795 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,807 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,819 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,831 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,843 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,855 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,867 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,879 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,891 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,903 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,915 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,927 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,939 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,951 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,963 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,975 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:23,987 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,000 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,012 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,024 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,036 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,049 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,061 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,074 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,087 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,107 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,126 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,140 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,153 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,165 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,177 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,190 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,202 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,214 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,226 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,239 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,251 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,263 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,275 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,298 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,321 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,334 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,346 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,358 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,370 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,382 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,394 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,406 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,418 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,430 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,442 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,454 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,466 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,478 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,490 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,502 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,514 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,526 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,538 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,550 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,562 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,574 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,586 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,598 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,610 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,621 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,634 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,645 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,657 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,669 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,681 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,693 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,705 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,717 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,729 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,741 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,753 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,765 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,777 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,789 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,801 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,812 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,824 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,836 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,848 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,860 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,872 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,884 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,896 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,908 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,920 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,948 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,954 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,960 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,964 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,968 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,972 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,977 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,981 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,985 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,989 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,993 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:24,997 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,001 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,005 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,009 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,012 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,015 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,018 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,021 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,024 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,027 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,030 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,033 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,036 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,039 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,041 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,044 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,057 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,060 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,064 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,067 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,070 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,073 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,076 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,079 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,082 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,096 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,099 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,101 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,103 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,130 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,133 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,138 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,140 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,142 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,151 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,153 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,158 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,160 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,163 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,192 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,195 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,199 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,201 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,203 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,230 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,233 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,235 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,237 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:34:25,244 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:34:25,244 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 20:34:25,244 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:34:25,245 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: item columns: i_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0,)],len==24
2024-03-06 20:34:28,997 - root - MCTS - INFO - mcts 100 >= 452.8515625
2024-03-06 20:34:28,998 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,134 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,240 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,318 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,381 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,438 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,484 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,525 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,564 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,602 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,640 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,677 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,678 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:34:29,679 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,680 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:34:29,680 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,680 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:34:29,680 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,680 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:34:29,680 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,680 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-06 20:34:29,681 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-06 20:34:29,681 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:34:29,681 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-06 20:34:29,682 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:34:29,682 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:34:29,682 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-06 20:34:29,682 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,682 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:34:29,683 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:34:29,683 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:34:29,683 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:34:29,683 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:34:29,683 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:34:29,683 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,683 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-06 20:34:29,684 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:34:29,684 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:34:29,684 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,684 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:34:29,684 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:34:29,684 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:34:29,685 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,685 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:34:29,685 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:34:29,685 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:34:29,685 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-06 20:34:29,686 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,686 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:34:29,686 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,686 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57882.58
2024-03-06 20:34:29,686 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-06 20:34:29,686 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 20:34:29,686 - root - filter_low_benefit_index - INFO - table: customer columns: c_customer_sk index_type:  storage: 2.484375 has benefit of 1.5
2024-03-06 20:34:29,686 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,686 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:34:29,687 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:34:29,687 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:34:29,687 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:34:29,687 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-06 20:34:29,688 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:34:29,688 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57882.59
2024-03-06 20:34:29,688 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-06 20:34:29,688 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 20:34:29,688 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 1.489999994635582
2024-03-06 20:34:29,693 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:34:29,865 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,865 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,865 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,866 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,867 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13387>btree_date_dim_d_year"', '"<13389>btree_customer_c_customer_sk"', '"<13391>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:34:29,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_year"', '"<13390>btree_item_i_item_sk"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,876 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,876 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_month_seq"']
2024-03-06 20:34:29,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995]
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995]
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 784.4099999999999, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2026.060000000005, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2144.5599999999977]
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:34:29,876 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:34:29,877 - root - filter_no_benefit_indexes - INFO - index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 20:34:29,877 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2026.060000000005]
2024-03-06 20:34:29,877 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:34:29,877 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2144.5599999999977]
2024-03-06 20:34:29,877 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 20:34:29,877 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2026.060000000005]
2024-03-06 20:34:29,877 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 20:34:29,882 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:34:29,882 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 20:34:29,883 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 20:35:32,807 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:32,915 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:32,960 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:33,024 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,045 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,062 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,085 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,097 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,110 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,124 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,137 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,149 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,161 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,173 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,186 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,199 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,212 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,224 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,236 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,249 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,261 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,273 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,285 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,297 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,309 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,321 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,333 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,345 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,357 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,371 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,388 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,401 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,413 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,425 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,438 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,450 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,462 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,474 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,486 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,498 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,510 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,522 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,534 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,546 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,558 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,570 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,582 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,596 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,608 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,620 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,632 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,644 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,656 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,668 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,680 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,692 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,705 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,717 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,729 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,741 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,753 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,765 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,777 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,789 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,802 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,814 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,826 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,839 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,851 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,863 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,876 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,888 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,900 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,912 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,924 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,937 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,949 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,961 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,974 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,986 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:33,999 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,011 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,024 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,037 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,049 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,061 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,073 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,085 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,097 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,109 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,120 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,132 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,145 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,157 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,169 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,180 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,193 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,204 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,216 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,228 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,240 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,252 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,264 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,275 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,288 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,300 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,312 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,324 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,337 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,349 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,361 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,373 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,385 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,398 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,410 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,422 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,434 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,446 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,458 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,470 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,482 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,494 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,506 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,518 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,531 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,543 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,571 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,576 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,580 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,583 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,586 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,589 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,592 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,595 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,598 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,601 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,604 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,607 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,610 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,613 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,616 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,619 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,622 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,625 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,627 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,630 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,633 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,636 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,638 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,641 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,644 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,647 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,650 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,663 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,666 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,669 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,671 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,673 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,675 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,676 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,678 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,680 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,690 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,692 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,695 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,697 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,721 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,724 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,727 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,729 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,731 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,740 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,742 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,744 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,746 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,747 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,763 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,766 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,769 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,771 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,773 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,800 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,802 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,804 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,806 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:34,813 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:34,814 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:35:34,814 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: item columns: i_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0,)],len==24
2024-03-06 20:35:38,549 - root - MCTS - INFO - mcts 100 >= 452.8515625
2024-03-06 20:35:38,550 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:38,703 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:38,796 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:38,873 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:38,942 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:38,997 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:39,045 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:39,085 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:39,126 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:39,164 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:39,201 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :154.57603726386614
2024-03-06 20:35:39,238 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,238 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:39,238 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,238 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:39,238 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,238 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57882.58
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,239 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,240 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,241 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-06 20:35:39,243 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-06 20:35:39,243 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:35:39,243 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-06 20:35:39,244 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:39,244 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:35:39,244 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-06 20:35:39,245 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-06 20:35:39,245 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 20:35:39,245 - root - filter_low_benefit_index - INFO - table: customer columns: c_customer_sk index_type:  storage: 2.484375 has benefit of 1.5
2024-03-06 20:35:39,245 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,245 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:39,245 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,246 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:39,246 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:35:39,246 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:39,246 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-06 20:35:39,246 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57882.59
2024-03-06 20:35:39,247 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-06 20:35:39,247 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 20:35:39,247 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 1.489999994635582
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,247 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:39,247 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:39,247 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:35:39,248 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:39,248 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:39,248 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:39,248 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,248 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:39,249 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:39,249 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:35:39,249 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,249 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:39,250 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:35:39,250 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:35:39,250 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:39,250 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:39,250 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:39,250 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:39,250 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-06 20:35:39,255 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:39,427 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,428 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,429 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,430 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,431 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,432 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_year"', '"<13384>btree_customer_c_customer_sk"', '"<13386>btree_customer_address_ca_address_sk"', 'store_pkey']
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,433 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,434 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,435 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,436 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,437 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_month_seq"']
2024-03-06 20:35:39,438 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:39,438 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:35:39,438 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 2026.060000000005]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 784.4099999999999, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 2026.060000000005]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 2026.060000000005, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2144.5599999999977]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995]
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:39,439 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 3938.5599999999995, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2144.5599999999977]
2024-03-06 20:35:39,439 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 20:35:39,444 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:39,445 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 20:35:39,445 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 20:35:40,531 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:40,616 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:40,660 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:40,714 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,734 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,750 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,774 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,786 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,799 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,811 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,824 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,836 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,849 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,861 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,874 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,887 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,900 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,914 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,927 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,939 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,952 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,975 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:40,988 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,000 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,013 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,026 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,038 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,051 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,063 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,076 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,088 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,101 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,113 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,125 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,137 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,149 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,162 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,174 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,186 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,198 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,211 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,223 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,240 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,252 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,265 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,278 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,290 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,303 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,315 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,327 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,340 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,351 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,363 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,377 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,390 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,402 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,413 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,425 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,437 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,449 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,461 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,473 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,485 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,497 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,509 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,521 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,533 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,545 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,557 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,569 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,581 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,593 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,605 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,617 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,630 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,642 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,654 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,666 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,678 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,690 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,701 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,713 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,725 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,737 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,749 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,761 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,773 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,784 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,797 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,808 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,820 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,832 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,844 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,856 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,868 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,892 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,904 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,916 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,928 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,941 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,953 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,965 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,978 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:41,990 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,002 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,014 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,026 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,038 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,050 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,062 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,074 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,086 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,097 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,109 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,121 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,133 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,145 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,157 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,169 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,193 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,205 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,217 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,229 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,241 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,265 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,269 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,273 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,276 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,279 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,282 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,285 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,287 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,290 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,293 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,296 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,298 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,301 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,304 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,307 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,309 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,312 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,315 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,318 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,321 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,323 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,326 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,329 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,332 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,334 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,337 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,340 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,350 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,352 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,355 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,357 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,359 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,360 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,362 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,364 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,365 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,373 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,375 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,378 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,379 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,398 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,400 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,403 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,405 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,406 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,414 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,416 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,418 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,419 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,433 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,435 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,438 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,440 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,442 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,464 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,466 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,468 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,470 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 20:35:42,478 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:42,478 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 20:35:42,478 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: item columns: i_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0,)],len==24
2024-03-06 20:35:43,698 - root - MCTS - INFO - mcts 300 >= 452.8515625
2024-03-06 20:35:43,698 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:43,862 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,009 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,120 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,224 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,320 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,412 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,491 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,566 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,639 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,709 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 20:35:44,776 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :54162.37
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,777 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :10643.82
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,778 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,779 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-06 20:35:44,780 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-06 20:35:44,780 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:35:44,780 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-06 20:35:44,781 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:44,781 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:35:44,781 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-06 20:35:44,781 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:35:44,782 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:35:44,782 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125 has benefit of 3728.079999998212
2024-03-06 20:35:44,782 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,782 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:44,782 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,782 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:44,782 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,782 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:44,782 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:44,783 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:35:44,783 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-06 20:35:44,783 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:35:44,783 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:35:44,783 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:44,783 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-06 20:35:44,784 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:35:44,784 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:44,784 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,784 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:44,785 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:44,785 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:44,785 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 20:35:44,785 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:44,785 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:35:44,785 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19483.98
2024-03-06 20:35:44,785 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57848.57
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 20:35:44,786 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 20:35:44,786 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:35:44,786 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125 has benefit of 1368.0099999904633
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 20:35:44,786 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 20:35:44,787 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-06 20:35:44,787 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 20:35:44,787 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-06 20:35:44,787 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 20:35:44,787 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 20:35:44,787 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 20:35:44,787 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:44,787 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-06 20:35:44,792 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:44,867 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,868 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,869 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,870 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_quarter_name"', '"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13386>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,871 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:35:44,872 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,873 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,874 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,875 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,876 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,877 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,878 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,879 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_year"', '"<13384>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,880 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,881 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_month_seq"']
2024-03-06 20:35:44,882 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 20:35:44,882 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 20:35:44,882 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 790.7800000000007, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-06 20:35:44,883 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 1051.3099999999995, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 790.7800000000007]
2024-03-06 20:35:44,884 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 20:35:44,884 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 20:35:44,884 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 20:35:44,890 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:35:44,890 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 20:35:44,891 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-06 20:37:33,690 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:37:34,704 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:37:34,757 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:43:36,860 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:43:37,874 - root - __init_conn_handle - INFO - connection successful
2024-03-06 20:43:37,921 - root - __init_conn_handle - INFO - connection successful
2024-03-06 21:25:17,540 - root - __init_conn_handle - INFO - connection successful
2024-03-06 21:25:17,619 - root - __init_conn_handle - INFO - connection successful
2024-03-06 21:25:17,668 - root - __init_conn_handle - INFO - connection successful
2024-03-06 21:25:17,726 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,746 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,762 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,785 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,797 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,810 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,822 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,835 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,847 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,859 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,872 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,885 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,897 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,909 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,922 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,934 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,946 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,958 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,970 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,983 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:17,995 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,007 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,019 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,031 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,044 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,057 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,069 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,081 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,093 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,106 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,119 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,131 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,143 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,155 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,168 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,183 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,197 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,209 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,222 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,235 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,247 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,260 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,272 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,285 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,298 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,312 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,325 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,338 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,351 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,364 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,377 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,390 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,403 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,415 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,428 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,441 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,453 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,466 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,479 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,492 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,504 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,517 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,529 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,541 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,554 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,566 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,579 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,591 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,603 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,616 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,628 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,640 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,652 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,665 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,680 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,692 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,705 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,718 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,730 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,743 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,756 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,768 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,781 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,794 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,807 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,821 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,833 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,845 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,857 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,870 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,882 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,894 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,906 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,919 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,931 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,943 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,955 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,967 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,980 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:18,992 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,004 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,016 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,029 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,041 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,053 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,065 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,077 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,089 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,101 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,114 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,126 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,138 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,150 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,162 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,174 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,186 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,198 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,211 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,222 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,235 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,247 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,259 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,271 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,296 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,300 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,304 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,307 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,310 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,312 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,315 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,318 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,321 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,324 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,327 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,330 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,333 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,336 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,339 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,341 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,344 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,347 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,350 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,353 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,356 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,359 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,362 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,365 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,369 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,372 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,375 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,385 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,388 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,394 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,396 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,399 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,400 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,402 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,404 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,406 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,414 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,416 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,419 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,440 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,443 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,446 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,448 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,450 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,458 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,459 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,462 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,463 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,465 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,477 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,480 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,483 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,485 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,487 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,509 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,511 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,514 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,515 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-06 21:25:19,523 - root - __init_conn_handle - INFO - connection successful
2024-03-06 21:25:19,523 - root - index_advisor_workload - INFO - Mcts started
2024-03-06 21:25:19,523 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-06 21:25:19,524 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: item columns: i_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 0,)],len==24
2024-03-06 21:25:20,850 - root - MCTS - INFO - mcts 300 >= 452.8515625
2024-03-06 21:25:20,850 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:20,991 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,147 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,259 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,367 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,456 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,543 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,620 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,694 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,766 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,836 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-06 21:25:21,903 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,903 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 21:25:21,903 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,903 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 21:25:21,903 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19483.98
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57848.57
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,904 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,905 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,906 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,906 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,906 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,906 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,906 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-06 21:25:21,907 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-06 21:25:21,907 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 21:25:21,907 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-06 21:25:21,907 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 21:25:21,908 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 21:25:21,908 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-06 21:25:21,908 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 21:25:21,908 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 21:25:21,908 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125 has benefit of 316.70000000298023
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 21:25:21,909 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 21:25:21,909 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 21:25:21,909 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,909 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :54162.37
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-06 21:25:21,910 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 21:25:21,910 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 21:25:21,910 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125 has benefit of 3728.079999998212
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,910 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 21:25:21,911 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 21:25:21,911 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 21:25:21,911 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,911 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-06 21:25:21,911 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 21:25:21,911 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 21:25:21,911 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,912 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 21:25:21,912 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 21:25:21,912 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,912 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-06 21:25:21,913 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-06 21:25:21,913 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 21:25:21,913 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-06 21:25:21,913 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-06 21:25:21,914 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-06 21:25:21,914 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-06 21:25:21,914 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 21:25:21,914 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-06 21:25:21,920 - root - __init_conn_handle - INFO - connection successful
2024-03-06 21:25:22,009 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,009 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,010 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,011 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_quarter_name"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,012 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,013 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,014 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,015 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,016 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13385>btree_date_dim_d_year"', '"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,017 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_store_sales_ss_item_sk_ss_sold_date_sk"', '"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-06 21:25:22,018 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-06 21:25:22,018 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-06 21:25:22,018 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125] benefit: 15282.019999999997]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125] benefit: 15282.019999999997, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 790.7800000000007]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 790.7800000000007, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4]
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-06 21:25:22,019 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 4213.4, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-06 21:25:22,019 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-06 21:25:22,025 - root - __init_conn_handle - INFO - connection successful
2024-03-06 21:25:22,026 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-06 21:25:22,026 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
