2024-03-07 12:35:48,046 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:35:48,109 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:35:48,123 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:35:48,123 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:35:48,124 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:35:48,124 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:35:48,129 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:35:48,195 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:36:12,189 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:36:12,901 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:36:12,914 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:36:12,916 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:36:12,918 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:36:12,918 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:36:12,924 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:36:13,242 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:37:41,937 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:37:42,003 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:37:42,018 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:37:42,019 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:37:42,020 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:37:42,020 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:37:42,025 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:37:42,102 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:39:17,428 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:39:17,477 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:39:17,490 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:39:17,491 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:39:17,491 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:39:17,491 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:39:17,497 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:39:17,548 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:46:04,927 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:46:04,978 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:46:04,993 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:46:04,994 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:46:04,994 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:46:04,994 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:46:05,000 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:46:05,053 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,654 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:47:47,716 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:47:47,730 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:47:47,730 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:47:47,731 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:47:47,731 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:47:47,736 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:47:47,799 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,847 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,894 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,906 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,919 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,931 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,943 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,955 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,967 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,980 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:47,993 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,005 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,018 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,030 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,043 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,055 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,068 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,080 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,093 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,106 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,119 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,131 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,144 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,157 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,171 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,184 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,197 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,210 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,223 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,235 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,248 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,263 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,289 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,315 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,341 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,354 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,367 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,380 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,394 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,407 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,422 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,437 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,450 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,462 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,475 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,488 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,500 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,512 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,524 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,536 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,548 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,560 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,572 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,585 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,598 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,611 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,623 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,636 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,648 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,662 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,674 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,687 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,699 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,712 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,725 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,737 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,749 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,761 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,774 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,787 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,800 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,812 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,824 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,836 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,861 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,885 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,899 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,913 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,928 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,952 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,968 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,980 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:48,992 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,004 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,016 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,028 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,041 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,054 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,067 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,079 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,091 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,104 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,116 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,129 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,142 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,154 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,166 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,179 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,191 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,203 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,216 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,228 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,240 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,252 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,265 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,277 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,289 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,301 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,313 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,325 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,339 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,351 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,363 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,376 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,388 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,400 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,412 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,424 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,436 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,448 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,460 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,473 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:47:49,489 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:47:49,489 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 12:47:49,489 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 12:47:49,489 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==10
2024-03-07 12:47:50,910 - root - MCTS - INFO - mcts 100 >= 176.6328125
2024-03-07 12:47:50,911 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-07 12:47:50,929 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-07 12:47:50,944 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-07 12:47:50,958 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-07 12:47:50,970 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :141.536556238666
2024-03-07 12:47:50,983 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:47:50,983 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-07 12:47:50,984 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:47:50,984 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:47:50,984 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.5299999999997
2024-03-07 12:47:50,984 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:47:50,984 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9608.89
2024-03-07 12:47:50,984 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:47:50,984 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 12:47:50,984 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875 has benefit of 270.5100000000002
2024-03-07 12:47:50,985 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:47:50,985 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-07 12:47:50,985 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:47:50,985 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:47:50,985 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 0.5
2024-03-07 12:47:50,985 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:47:50,985 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-07 12:47:50,985 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:47:50,985 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:47:50,985 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 0.25
2024-03-07 12:47:50,993 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:47:51,142 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13384>btree_date_dim_d_date_sk"', 'store_pkey', '"<13385>btree_item_i_item_sk"']
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13384>btree_date_dim_d_date_sk"', 'store_pkey', '"<13385>btree_item_i_item_sk"']
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13384>btree_date_dim_d_date_sk"', 'store_pkey', '"<13385>btree_item_i_item_sk"']
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:47:51,143 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', 'store_sales_pkey', '"<13384>btree_date_dim_d_date_sk"', 'store_pkey', '"<13385>btree_item_i_item_sk"']
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:47:51,144 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2239.7999999999993]
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2239.7999999999993]
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2239.7999999999993]
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:47:51,144 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2239.7999999999993]
2024-03-07 12:47:51,144 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 12:47:51,151 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:47:51,152 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 12:47:51,152 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 12:48:20,398 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:20,447 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:20,461 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:48:20,461 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:48:20,461 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:48:20,462 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:48:20,467 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:20,518 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,724 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,796 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,815 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,828 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,841 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,854 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,868 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,893 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,906 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,923 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,936 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,949 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,963 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,977 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:20,990 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,007 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,021 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,034 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,047 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,061 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,074 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,088 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,101 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,114 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,126 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,139 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,151 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,164 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,176 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,188 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,200 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,213 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,225 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,238 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,250 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,262 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,275 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,287 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,298 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,311 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,323 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,336 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,348 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,360 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,372 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,384 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,397 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,409 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,433 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,445 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,457 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,469 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,482 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,494 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,507 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,520 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,532 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,545 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,558 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,570 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,583 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,595 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,608 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,620 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,633 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,646 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,659 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,671 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,683 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,695 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,708 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,720 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,733 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,746 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,759 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,772 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,784 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,798 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,811 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,824 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,837 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,850 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,862 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,875 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,888 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,902 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,915 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,928 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,941 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,953 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,967 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,980 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:21,993 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,006 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,018 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,031 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,044 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,057 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,070 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,082 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,095 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,110 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,123 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,135 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,148 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,162 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,175 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,187 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,199 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,212 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,224 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,237 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,249 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,262 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,274 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,286 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,298 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,311 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,323 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:48:22,341 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:22,341 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 12:48:22,341 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 12:48:22,341 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==10
2024-03-07 12:48:22,759 - root - MCTS - INFO - mcts 300 >= 176.6328125
2024-03-07 12:48:22,759 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:48:22,759 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-07 12:48:22,760 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:48:22,760 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:48:22,760 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.5299999999997
2024-03-07 12:48:22,760 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:48:22,760 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9608.89
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875 has benefit of 270.5100000000002
2024-03-07 12:48:22,761 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:48:22,761 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9741.99
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125 has benefit of 137.40999999999985
2024-03-07 12:48:22,761 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:48:22,761 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:48:22,761 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 0.5
2024-03-07 12:48:22,762 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:48:22,762 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-07 12:48:22,762 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:48:22,762 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:48:22,762 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 0.25
2024-03-07 12:48:22,767 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:22,812 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:48:22,814 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:48:22,814 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 12:48:22,814 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 12:48:22,821 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:22,821 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 12:48:22,821 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 12:48:44,281 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:45,014 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:45,028 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 12:48:45,030 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:48:45,031 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 12:48:45,031 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 12:48:45,039 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:48:45,353 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:12,079 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:55,754 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:49:55,833 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:49:55,878 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:49:55,934 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,162 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,210 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,223 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,235 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,247 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,259 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,271 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,283 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,295 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,307 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,319 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,334 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,346 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,358 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,370 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,383 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,395 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,407 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,420 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,432 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,444 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,457 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,469 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,482 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,494 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,506 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,518 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,530 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,542 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,554 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,566 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,578 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,590 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,602 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,614 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,626 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,638 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,650 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,662 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,674 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,686 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,698 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,710 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,722 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,734 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,747 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,759 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,771 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,783 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,794 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,806 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,819 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,831 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,843 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,855 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,867 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,879 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,891 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,904 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,916 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,929 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,942 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,954 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,967 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,983 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:56,995 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,008 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,020 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,034 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,046 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,059 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,071 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,083 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,096 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,108 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,120 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,133 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,145 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,157 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,169 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,181 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,193 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,206 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,218 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,230 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,242 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,254 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,266 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,278 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,291 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,303 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,316 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,328 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,340 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,353 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,365 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,378 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,391 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,403 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,416 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,428 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,441 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,453 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,466 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,478 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,490 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,503 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,516 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,528 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,541 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,553 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,565 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,577 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,589 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,601 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,614 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,626 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,639 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,651 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,664 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,677 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,702 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,793 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,798 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,801 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,804 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,807 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,810 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,813 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,816 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,819 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,822 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,825 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,828 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,831 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,834 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,837 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,841 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,844 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,847 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,850 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,853 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,856 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,860 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,863 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,866 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,869 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,880 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,897 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,900 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,902 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,904 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,906 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,908 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,910 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,918 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,945 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,947 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,966 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,970 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,973 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,975 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:57,982 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,001 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,003 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,005 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,018 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,030 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,034 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,036 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,060 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,066 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,068 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 12:49:58,078 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:49:58,078 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 12:49:58,078 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,078 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,078 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,078 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,079 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,079 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,079 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,079 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-07 12:49:58,079 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==24
2024-03-07 12:49:59,440 - root - MCTS - INFO - mcts 300 >= 452.8515625
2024-03-07 12:49:59,441 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:49:59,599 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:49:59,733 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:49:59,856 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:49:59,962 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:50:00,062 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:50:00,153 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:50:00,237 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:50:00,315 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:50:00,391 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:50:00,465 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :463.72811179159834
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.3
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 12:50:00,536 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :54162.37
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :10643.82
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,537 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :69929.23
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14395.97
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,538 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,539 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,539 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-07 12:50:00,539 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-07 12:50:00,540 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-07 12:50:00,540 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96
2024-03-07 12:50:00,540 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:50:00,540 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 12:50:00,540 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-07 12:50:00,540 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,541 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-07 12:50:00,541 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-07 12:50:00,541 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-07 12:50:00,541 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0]
2024-03-07 12:50:00,541 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:50:00,541 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.25
2024-03-07 12:50:00,541 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,541 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-07 12:50:00,541 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,542 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 12:50:00,542 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125
2024-03-07 12:50:00,542 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125 has benefit of 3721.7099999934435
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 12:50:00,542 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :68027.66
2024-03-07 12:50:00,543 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0]
2024-03-07 12:50:00,543 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 12:50:00,543 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 4046.1299999952316
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :15821.74
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,543 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:50:00,543 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:50:00,543 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 3937.059999987483
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19483.98
2024-03-07 12:50:00,543 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57848.57
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,544 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-07 12:50:00,544 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-07 12:50:00,544 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125 has benefit of 1368.0099999904633
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,544 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.93
2024-03-07 12:50:00,545 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-07 12:50:00,545 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 12:50:00,545 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1299999952316
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19757.8
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.83
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,545 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-07 12:50:00,545 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:50:00,545 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1661.390000000596
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：19758.8，self.get_indexes_cost_of_query(query, tuple([index])) :19758.8
2024-03-07 12:50:00,545 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 12:50:00,546 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 12:50:00,546 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 12:50:00,548 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-07 12:50:00,548 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125] benefit: 0
2024-03-07 12:50:00,548 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70050.73，self.get_indexes_cost_of_query(query, tuple([index])) :70050.73
2024-03-07 12:50:00,548 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,548 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 12:50:00,548 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 12:50:00,548 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 12:50:00,548 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 12:50:00,548 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 12:50:00,548 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999904633
2024-03-07 12:50:00,554 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,640 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,641 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', '"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', 'catalog_sales_pkey', '"<13390>btree_date_dim_d_date_sk"', 'store_pkey', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,642 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,643 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,644 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13391>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,645 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,646 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,647 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,648 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_store_sales_ss_item_sk_ss_ticket_number"', '"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13389>btree_date_dim_d_month_seq"']
2024-03-07 12:50:00,649 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 12:50:00,649 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-07 12:50:00,649 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125, table: date_dim columns: d_date index_type:  storage: 1.8125] benefit: 44571.899999999994]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: item columns: i_item_sk index_type:  storage: 0.4453125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 4213.4, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125, table: date_dim columns: d_date index_type:  storage: 1.8125] benefit: 44571.899999999994]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.8203125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15282.019999999997]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: item columns: i_item_sk index_type:  storage: 0.4453125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 4213.4]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: item columns: i_item_sk index_type:  storage: 0.4453125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 4213.4, statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125] benefit: 1051.3099999999995, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 790.7800000000007]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 790.7800000000007, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 2.0 index_list: [table: item columns: i_item_sk index_type:  storage: 0.4453125, table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125] benefit: 4213.4]
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 12:50:00,650 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125, table: date_dim columns: d_date index_type:  storage: 1.8125] benefit: 44571.899999999994]
2024-03-07 12:50:00,650 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 12:50:00,657 - root - __init_conn_handle - INFO - connection successful
2024-03-07 12:50:00,657 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 12:50:00,657 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 13:08:44,670 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:08:44,722 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:08:44,738 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:08:44,739 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:08:44,739 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:08:44,739 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:08:44,747 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:08:44,801 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,116 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,170 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,184 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,211 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,237 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,263 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,300 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,317 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,331 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,346 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,361 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,377 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,392 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,408 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,422 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,437 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,452 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,465 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,478 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,492 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,506 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,523 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,536 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,549 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,563 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,576 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,589 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,603 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,617 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,630 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,642 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,654 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,667 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,679 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,691 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,703 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,715 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,729 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,742 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,754 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,767 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,780 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,792 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,805 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,818 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,831 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,844 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,857 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,869 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,882 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,894 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,907 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,920 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,933 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,946 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,959 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,973 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,986 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:45,999 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,012 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,025 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,038 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,051 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,064 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,077 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,091 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,105 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,119 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,138 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,153 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,167 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,180 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,193 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,207 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,220 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,234 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,246 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,259 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,272 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,284 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,297 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,310 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,323 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,336 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,349 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,362 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,376 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,389 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,403 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,417 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,436 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,449 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,461 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,474 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,486 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,499 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,513 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,526 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,539 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,552 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,564 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,577 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,589 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,602 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,616 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,629 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,642 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,654 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,666 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,679 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,692 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,704 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,717 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,730 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,742 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,755 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,767 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,780 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,792 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,805 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,818 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:08:46,836 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:08:46,836 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 13:08:46,836 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 13:08:46,836 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==10
2024-03-07 13:08:47,260 - root - MCTS - INFO - mcts 300 >= 176.6328125
2024-03-07 13:08:47,260 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:08:47,260 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-07 13:08:47,261 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:08:47,261 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 13:08:47,261 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.5299999999997
2024-03-07 13:08:47,262 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:08:47,262 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9608.89
2024-03-07 13:08:47,262 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:08:47,262 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 13:08:47,262 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875 has benefit of 270.5100000000002
2024-03-07 13:08:47,262 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:08:47,262 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9741.99
2024-03-07 13:08:47,262 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:08:47,262 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 13:08:47,262 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125 has benefit of 137.40999999999985
2024-03-07 13:08:47,263 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:08:47,263 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-07 13:08:47,263 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:08:47,263 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 13:08:47,263 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 0.5
2024-03-07 13:08:47,263 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:08:47,263 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-07 13:08:47,263 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:08:47,263 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:08:47,263 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 0.25
2024-03-07 13:08:47,270 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:08:47,321 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:08:47,322 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:08:47,323 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:08:47,323 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 13:08:47,323 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:08:47,323 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 13:08:47,323 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:08:47,323 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 13:08:47,323 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:08:47,323 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 13:08:47,324 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:08:47,324 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:08:47,324 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:08:47,324 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 13:08:47,331 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:08:47,331 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 13:08:47,331 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 13:14:37,228 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:14:38,164 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:14:38,178 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:14:38,180 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:14:38,182 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:14:38,182 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:14:38,189 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:14:38,515 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:15:56,022 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:15:56,748 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:15:56,762 - root - __execute - INFO - error sql :prepare prepare_1 as -- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:15:56,764 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:15:56,767 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:15:56,767 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:15:56,775 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:24:33,287 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:24:33,324 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:24:33,329 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
-- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;
--
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:24:33,329 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:24:33,330 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:24:33,330 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:24:33,335 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:24:33,386 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,407 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,411 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,414 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,416 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,418 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,420 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,422 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:24:33,429 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:24:33,430 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 13:24:33,430 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 13:24:33,430 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,)],len==5
2024-03-07 13:24:33,583 - root - MCTS - INFO - mcts 300 >= 38.171875
2024-03-07 13:24:33,583 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:24:33,583 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-07 13:24:33,585 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:24:33,585 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 13:24:33,585 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.97
2024-03-07 13:24:33,585 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:24:33,585 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-07 13:24:33,585 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:24:33,585 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 13:24:33,585 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7599999999948
2024-03-07 13:24:33,586 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:24:33,586 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-07 13:24:33,586 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:24:33,586 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:24:33,586 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 61.25
2024-03-07 13:24:33,591 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13383>btree_date_dim_d_date"', '"<13382>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13383>btree_date_dim_d_date"', '"<13382>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:24:33,625 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13383>btree_date_dim_d_date"', '"<13382>btree_catalog_sales_cs_sold_date_sk"', '"<13384>btree_item_i_item_sk"']
2024-03-07 13:24:33,626 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:24:33,626 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:24:33,626 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:24:33,626 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:24:33,626 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 13:24:33,626 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-07 13:24:33,626 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 13:24:33,626 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-07 13:24:33,626 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:24:33,626 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-07 13:24:33,626 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 13:24:33,633 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:24:33,633 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 13:24:33,633 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 13:25:48,468 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:25:48,509 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:25:48,532 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:25:48,532 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:25:48,533 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:25:48,533 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:25:48,541 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:25:48,601 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,796 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,850 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,864 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,877 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,891 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,905 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,919 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,933 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,946 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,959 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,972 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,985 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:48,997 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,011 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,024 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,037 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,050 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,063 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,075 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,087 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,100 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,113 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,125 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,138 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,150 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,162 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,175 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,188 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,201 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,214 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,227 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,240 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,253 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,272 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,291 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,310 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,324 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,338 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,351 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,364 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,382 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,395 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,408 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,434 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,448 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,462 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,476 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,490 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,504 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,517 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,530 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,544 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,558 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,574 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,593 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,611 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,626 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,644 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,662 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,681 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,702 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,721 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,742 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,762 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,776 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,789 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,801 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,815 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,828 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,841 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,854 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,866 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,879 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,892 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,905 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,918 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,931 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,944 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,957 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,970 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,983 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:49,996 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,009 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,022 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,035 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,048 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,061 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,074 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,088 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,102 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,121 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,135 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,148 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,161 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,179 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,192 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,205 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,218 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,232 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,245 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,262 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,280 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,292 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,305 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,317 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,330 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,344 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,357 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,371 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,391 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,405 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,418 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,439 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,456 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,470 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,484 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,496 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,509 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,523 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,536 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,549 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:25:50,568 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:25:50,568 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 13:25:50,568 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 13:25:50,568 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==10
2024-03-07 13:25:51,121 - root - MCTS - INFO - mcts 300 >= 176.6328125
2024-03-07 13:25:51,121 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:25:51,121 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-07 13:25:51,123 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:25:51,123 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 13:25:51,123 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.5299999999997
2024-03-07 13:25:51,124 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:25:51,125 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9608.89
2024-03-07 13:25:51,125 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:25:51,125 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 13:25:51,125 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875 has benefit of 270.5100000000002
2024-03-07 13:25:51,125 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:25:51,125 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9741.99
2024-03-07 13:25:51,126 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:25:51,126 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 13:25:51,126 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125 has benefit of 137.40999999999985
2024-03-07 13:25:51,126 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:25:51,126 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-07 13:25:51,126 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:25:51,126 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 13:25:51,126 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 0.5
2024-03-07 13:25:51,126 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 13:25:51,126 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-07 13:25:51,127 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 13:25:51,127 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:25:51,127 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 0.25
2024-03-07 13:25:51,134 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:25:51,196 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_quarter_name"', '"<13383>btree_catalog_sales_cs_item_sk_cs_bill_customer_sk"', '"<13384>btree_store_sales_ss_item_sk_ss_customer_sk"', '"<13385>btree_date_dim_d_date_sk"', 'store_pkey', '"<13386>btree_item_i_item_sk"']
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:25:51,197 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:25:51,197 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 13:25:51,197 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 13:25:51,198 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.8203125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 2240.8499999999995]
2024-03-07 13:25:51,198 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 13:25:51,205 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:25:51,205 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 13:25:51,206 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 13:31:48,815 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:31:48,842 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:31:48,848 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:31:48,848 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:31:48,849 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:31:48,849 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:31:48,856 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:31:48,920 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:31:49,114 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:31:49,118 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:31:49,120 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:31:49,130 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:31:49,130 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 13:31:49,130 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 13:31:49,131 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: date_dim columns: d_year index_type:  storage: 0)],len==4
2024-03-07 13:31:49,331 - root - MCTS - INFO - mcts 300 >= 3.0546875
2024-03-07 13:31:49,331 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 13:31:49,332 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :68383.81
2024-03-07 13:31:49,333 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 13:31:49,333 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:31:49,333 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 2136.600000000006
2024-03-07 13:31:49,334 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 13:31:49,334 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 13:31:49,334 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 13:31:49,334 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:31:49,334 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 13:31:49,341 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:31:49,386 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 13:31:49,387 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:31:49,388 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:31:49,388 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:31:49,388 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 13:31:49,388 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:31:49,388 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 13:31:49,388 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 13:31:49,396 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:31:49,396 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 13:31:49,396 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 13:37:54,362 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:37:54,384 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:37:54,389 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:37:54,389 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:37:54,389 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:37:54,389 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:37:54,395 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:37:54,444 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:37:54,606 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:37:54,611 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:37:54,613 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:37:54,623 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:37:54,623 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 13:37:54,623 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 13:37:54,623 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: date_dim columns: d_year index_type:  storage: 0)],len==4
2024-03-07 13:37:54,763 - root - MCTS - INFO - mcts 300 >= 3.0546875
2024-03-07 13:37:54,763 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 13:37:54,763 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :68383.81
2024-03-07 13:37:54,766 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 13:37:54,766 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:37:54,766 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 2136.600000000006
2024-03-07 13:37:54,767 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 13:37:54,767 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 13:37:54,767 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 13:37:54,768 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:37:54,768 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 13:37:54,776 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:37:54,812 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:37:54,813 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:37:54,813 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:37:54,813 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 13:37:54,813 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:37:54,813 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 13:37:54,813 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 13:37:54,823 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:37:54,823 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 13:37:54,824 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 13:39:38,294 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:39:38,322 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:39:38,327 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:39:38,327 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:39:38,328 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:39:38,328 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:39:38,333 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:39:38,396 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:39:38,423 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:39:38,427 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:39:38,429 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:39:38,436 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:39:38,436 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 13:39:38,436 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 13:39:38,436 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: date_dim columns: d_year index_type:  storage: 0)],len==4
2024-03-07 13:39:38,970 - root - MCTS - INFO - mcts 100 >= 3.0546875
2024-03-07 13:39:38,971 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 13:39:38,971 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :68383.81
2024-03-07 13:39:38,972 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 13:39:38,973 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:39:38,973 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 2136.600000000006
2024-03-07 13:39:38,973 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 13:39:38,973 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 13:39:38,973 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 13:39:38,973 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:39:38,973 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 13:39:38,978 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:39:39,112 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:39:39,113 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:39:39,113 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:39:39,113 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 13:39:39,113 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:39:39,113 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 13:39:39,114 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 13:39:39,118 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:39:39,119 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 13:39:39,119 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 13:55:54,128 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:55:54,152 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:55:54,156 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 13:55:54,157 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:55:54,157 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 13:55:54,157 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 13:55:54,163 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:55:54,222 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,823 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,829 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,832 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,835 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,839 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,842 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,845 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,849 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,852 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,855 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,858 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,861 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,863 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,866 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,869 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,872 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,875 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,878 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,881 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,884 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,887 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,890 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,893 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,896 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,899 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 13:55:54,907 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:55:54,908 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 13:55:54,908 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: household_demographics columns: hd_demo_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0] benefit: 0
2024-03-07 13:55:54,908 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: date_dim columns: d_year index_type:  storage: 0,), (table: household_demographics columns: hd_demo_sk index_type:  storage: 0,)],len==6
2024-03-07 13:55:55,116 - root - MCTS - INFO - mcts 300 >= 5.7109375
2024-03-07 13:55:55,116 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0
2024-03-07 13:55:55,117 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :68383.81
2024-03-07 13:55:55,118 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0]
2024-03-07 13:55:55,118 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:55:55,118 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 2136.600000000006
2024-03-07 13:55:55,118 - root - is_positive_query - INFO - index ：table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0
2024-03-07 13:55:55,118 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70497.91
2024-03-07 13:55:55,118 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0]
2024-03-07 13:55:55,118 - root - filter_low_benefit_index - INFO - filter low benefit index for table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875
2024-03-07 13:55:55,119 - root - filter_low_benefit_index - INFO - table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875 has benefit of 22.5
2024-03-07 13:55:55,119 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0
2024-03-07 13:55:55,119 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 13:55:55,119 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0]
2024-03-07 13:55:55,119 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:55:55,119 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 13:55:55,120 - root - is_positive_query - INFO - index ：table: customer columns: c_customer_sk index_type:  storage: 2.484375，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0
2024-03-07 13:55:55,120 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70508.16
2024-03-07 13:55:55,120 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 0]
2024-03-07 13:55:55,120 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-07 13:55:55,120 - root - filter_low_benefit_index - INFO - table: customer columns: c_customer_sk index_type:  storage: 2.484375 has benefit of 12.25
2024-03-07 13:55:55,125 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:55:55,177 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', '"<13383>btree_household_demographics_hd_demo_sk"', '"<13384>btree_customer_address_ca_address_sk"', '"<13385>btree_customer_c_customer_sk"']
2024-03-07 13:55:55,177 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:55:55,177 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:55:55,177 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,177 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,177 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', '"<13383>btree_household_demographics_hd_demo_sk"', '"<13384>btree_customer_address_ca_address_sk"', '"<13385>btree_customer_c_customer_sk"']
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', '"<13383>btree_household_demographics_hd_demo_sk"', '"<13384>btree_customer_address_ca_address_sk"', '"<13385>btree_customer_c_customer_sk"']
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', '"<13383>btree_household_demographics_hd_demo_sk"', '"<13384>btree_customer_address_ca_address_sk"', '"<13385>btree_customer_c_customer_sk"']
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 13:55:55,178 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-07 13:55:55,178 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 13:55:55,178 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 2188.8099999999977]
2024-03-07 13:55:55,178 - root - filter_no_benefit_indexes - INFO - index : table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875
2024-03-07 13:55:55,178 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 2188.8099999999977]
2024-03-07 13:55:55,178 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 13:55:55,178 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 2188.8099999999977]
2024-03-07 13:55:55,179 - root - filter_no_benefit_indexes - INFO - index : table: customer columns: c_customer_sk index_type:  storage: 2.484375
2024-03-07 13:55:55,179 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: household_demographics columns: hd_demo_sk index_type:  storage: 0.171875, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875, table: customer columns: c_customer_sk index_type:  storage: 2.484375] benefit: 2188.8099999999977]
2024-03-07 13:55:55,179 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 13:55:55,187 - root - __init_conn_handle - INFO - connection successful
2024-03-07 13:55:55,187 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 13:55:55,187 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 14:05:39,878 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:05:40,161 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:05:40,178 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:05:40,181 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:05:40,184 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:05:40,184 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:05:40,209 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:11:13,456 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:11:13,479 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:11:13,484 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:11:13,484 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:11:13,485 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:11:13,485 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:11:13,490 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:11:13,546 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:11:13,714 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:11:13,718 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:11:13,721 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:11:13,729 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:11:13,730 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 14:11:13,730 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 14:11:13,730 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: date_dim columns: d_year index_type:  storage: 0)],len==4
2024-03-07 14:11:13,872 - root - MCTS - INFO - mcts 300 >= 3.0546875
2024-03-07 14:11:13,873 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:11:13,873 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :68383.81
2024-03-07 14:11:13,876 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:11:13,876 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:11:13,876 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 2136.600000000006
2024-03-07 14:11:13,877 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:11:13,877 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 14:11:13,877 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:11:13,877 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:11:13,877 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 14:11:13,884 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:11:13,922 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:11:13,923 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:11:13,923 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:11:13,923 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 14:11:13,923 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:11:13,923 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 14:11:13,923 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 14:11:13,931 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:11:13,932 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 14:11:13,932 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 14:15:52,986 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:15:53,010 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:15:53,015 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:15:53,015 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:15:53,015 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:15:53,016 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:15:53,021 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:15:53,077 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:15:53,365 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:15:53,370 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:15:53,373 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:15:53,380 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:15:53,380 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 14:15:53,381 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 14:15:53,381 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0)],len==4
2024-03-07 14:15:53,518 - root - MCTS - INFO - mcts 300 >= 116.0625
2024-03-07 14:15:53,519 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:15:53,519 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :42782.91
2024-03-07 14:15:53,520 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:15:53,520 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-07 14:15:53,520 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125 has benefit of 27737.5
2024-03-07 14:15:53,521 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:15:53,521 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 14:15:53,521 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:15:53,521 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:15:53,521 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 14:15:53,528 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:15:53,569 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:15:53,569 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:15:53,569 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:15:53,570 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:15:53,570 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-07 14:15:53,570 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 27757.210000000006]
2024-03-07 14:15:53,570 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:15:53,570 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 27757.210000000006]
2024-03-07 14:15:53,570 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 14:15:53,577 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:15:53,577 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 14:15:53,578 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 14:18:58,426 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:18:58,450 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:18:58,454 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:18:58,455 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:18:58,455 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:18:58,455 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:18:58,461 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:18:58,512 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:18:58,670 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:18:58,674 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:18:58,677 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:18:58,685 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:18:58,685 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 14:18:58,685 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 14:18:58,685 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: date_dim columns: d_year index_type:  storage: 0)],len==4
2024-03-07 14:18:58,806 - root - MCTS - INFO - mcts 300 >= 3.0546875
2024-03-07 14:18:58,806 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:18:58,806 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :68383.81
2024-03-07 14:18:58,808 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:18:58,809 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:18:58,809 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 2136.600000000006
2024-03-07 14:18:58,809 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:18:58,809 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 14:18:58,809 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:18:58,809 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:18:58,809 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 14:18:58,815 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:18:58,846 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:18:58,846 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:18:58,846 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:18:58,847 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:18:58,847 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:18:58,847 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 14:18:58,847 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:18:58,847 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 14:18:58,847 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 14:18:58,853 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:18:58,853 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 14:18:58,853 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 14:29:16,628 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:29:16,650 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:29:16,661 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:29:16,662 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:29:16,662 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:29:16,662 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:29:16,668 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:29:16,717 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:29:16,859 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:29:16,907 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 14:29:16,912 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:29:16,912 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 14:29:16,913 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 14:31:32,168 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:31:32,193 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:31:32,207 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:31:32,207 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:31:32,208 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:31:32,208 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:31:32,215 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:31:32,270 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:31:32,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:31:32,483 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 14:31:32,491 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:31:32,491 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 14:31:32,492 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 14:33:45,043 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:33:45,065 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:33:45,069 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:33:45,070 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:33:45,070 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:33:45,070 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:33:45,076 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:33:45,125 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:33:45,271 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:33:45,275 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:33:45,277 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:33:45,285 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:33:45,286 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 14:33:45,286 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 14:33:45,286 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: date_dim columns: d_year index_type:  storage: 0)],len==4
2024-03-07 14:33:45,404 - root - MCTS - INFO - mcts 300 >= 3.0546875
2024-03-07 14:33:45,404 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:33:45,405 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :68383.81
2024-03-07 14:33:45,406 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:33:45,407 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:33:45,407 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 2136.600000000006
2024-03-07 14:33:45,407 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:33:45,407 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 14:33:45,407 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:33:45,407 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:33:45,407 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 14:33:45,413 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:33:45,446 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_date_dim_d_year"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:33:45,447 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:33:45,448 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:33:45,448 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 14:33:45,448 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 14:33:45,448 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:33:45,448 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 2154.0599999999977]
2024-03-07 14:33:45,448 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 14:33:45,454 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:33:45,454 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 14:33:45,454 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 14:43:03,446 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:43:03,473 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:43:03,478 - root - __execute - INFO - error sql :prepare prepare_1 as --
-- select
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
-- (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
-- ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
-- from
-- web_sales
-- ,warehouse
-- ,ship_mode
-- ,web_site
-- ,date_dim
-- where
-- d_month_seq between 1186 and 1186 + 11
-- and ws_ship_date_sk = d_date_sk
-- and ws_warehouse_sk = w_warehouse_sk
-- and ws_ship_mode_sk = sm_ship_mode_sk
-- and ws_web_site_sk = web_site_sk
-- group by
-- substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- order by substr(w_warehouse_name,1,20)
-- ,sm_type
-- ,web_name
-- limit 100;
2024-03-07 14:43:03,478 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:43:03,479 - root - __execute - WARNING - Found prepared statement "prepare_1" does not exist
 while executing SQL statement.
2024-03-07 14:43:03,479 - root - is_valid_statement - INFO - _tuple :('ERROR',)
2024-03-07 14:43:03,484 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:43:03,553 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:43:03,856 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:43:03,862 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:43:03,866 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 14:43:03,875 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:43:03,875 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 14:43:03,875 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 14:43:03,875 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0)],len==4
2024-03-07 14:43:04,030 - root - MCTS - INFO - mcts 300 >= 116.0625
2024-03-07 14:43:04,031 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:43:04,031 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :42782.91
2024-03-07 14:43:04,033 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:43:04,033 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-07 14:43:04,033 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125 has benefit of 27737.5
2024-03-07 14:43:04,033 - root - is_positive_query - INFO - index ：table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875，query :statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 14:43:04,034 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70520.41，self.get_indexes_cost_of_query(query, tuple([index])) :70502.95
2024-03-07 14:43:04,034 - root - filter_low_benefit_index - INFO - positive_queries for [statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 14:43:04,034 - root - filter_low_benefit_index - INFO - filter low benefit index for table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:43:04,034 - root - filter_low_benefit_index - INFO - table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875 has benefit of 17.460000000006403
2024-03-07 14:43:04,040 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', '"<13383>btree_customer_address_ca_address_sk"', 'customer_pkey']
2024-03-07 14:43:04,074 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:43:04,075 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:43:04,075 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 14:43:04,075 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:43:04,075 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 14:43:04,075 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125
2024-03-07 14:43:04,075 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 27757.210000000006]
2024-03-07 14:43:04,075 - root - filter_no_benefit_indexes - INFO - index : table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875
2024-03-07 14:43:04,075 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: -- select i_item_id
-- ,i_item_desc
-- ,s_state
-- ,count(ss_quantity) as store_sales_quantitycount
-- ,avg(ss_quantity) as store_sales_quantityave
-- ,stddev_samp(ss_quantity) as store_sales_quantitystdev
-- ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
-- ,count(sr_return_quantity) as store_returns_quantitycount
-- ,avg(sr_return_quantity) as store_returns_quantityave
-- ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
-- ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
-- ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
-- ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
-- ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
-- from store_sales
-- ,store_returns
-- ,catalog_sales
-- ,date_dim d1
-- ,date_dim d2
-- ,date_dim d3
-- ,store
-- ,item
-- where d1.d_quarter_name = '1998Q1'
-- and d1.d_date_sk = ss_sold_date_sk
-- and i_item_sk = ss_item_sk
-- and s_store_sk = ss_store_sk
-- and ss_customer_sk = sr_customer_sk
-- and ss_item_sk = sr_item_sk
-- and ss_ticket_number = sr_ticket_number
-- and sr_returned_date_sk = d2.d_date_sk
-- and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- and sr_customer_sk = cs_bill_customer_sk
-- and sr_item_sk = cs_item_sk
-- and cs_sold_date_sk = d3.d_date_sk
-- and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
-- group by i_item_id
-- ,i_item_desc
-- ,s_state
-- order by i_item_id
-- ,i_item_desc
-- ,s_state
-- limit 100;

-- select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
-- 	sum(ss_ext_sales_price) ext_price
-- from date_dim, store_sales, item,customer,customer_address,store
-- where d_date_sk = ss_sold_date_sk
-- and ss_item_sk = i_item_sk
-- and i_manager_id=66
-- and d_moy=12
-- and d_year=2002
-- and ss_customer_sk = c_customer_sk
-- and c_current_addr_sk = ca_address_sk
-- and substr(ca_zip,1,5) <> substr(s_zip,1,5)
-- and ss_store_sk = s_store_sk
-- group by i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- order by ext_price desc
-- ,i_brand
-- ,i_brand_id
-- ,i_manufact_id
-- ,i_manufact
-- limit 100 ;
--
-- select i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- ,sum(cs_ext_sales_price) as itemrevenue
-- ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
-- (partition by i_class) as revenueratio
-- from	catalog_sales
-- ,item
-- ,date_dim
-- where cs_item_sk = i_item_sk
-- and i_category in ('Books', 'Women', 'Home')
-- and cs_sold_date_sk = d_date_sk
-- and d_date between cast('1999-06-15' as date)
-- 				and (cast('1999-06-15' as date) + interval '30' day)
-- group by i_item_id
-- ,i_item_desc
-- ,i_category
-- ,i_class
-- ,i_current_price
-- order by i_category
-- ,i_class
-- ,i_item_id
-- ,i_item_desc
-- ,revenueratio
-- limit 100;
--
-- select ss_customer_sk
-- ,sum(act_sales) sumsales
-- from (select ss_item_sk
-- ,ss_ticket_number
-- ,ss_customer_sk
-- ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
-- else (ss_quantity*ss_sales_price) end act_sales
-- from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
-- and sr_ticket_number = ss_ticket_number)
-- ,reason
-- where sr_reason_sk = r_reason_sk
-- and r_reason_desc = 'reason 25') t
-- group by ss_customer_sk
-- order by sumsales, ss_customer_sk
-- limit 100;
--
-- select distinct(i_product_name)
-- from item i1
-- where i_manufact_id between 851 and 851+40
-- and (select count(*) as item_cnt
-- from item
-- where (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'rose' or i_color = 'lemon') and
-- (i_units = 'Unknown' or i_units = 'Oz') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'deep' or i_color = 'smoke') and
-- (i_units = 'Pound' or i_units = 'Pallet') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'pink' or i_color = 'aquamarine') and
-- (i_units = 'Ton' or i_units = 'Tsp') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'snow' or i_color = 'cornflower') and
-- (i_units = 'Case' or i_units = 'Lb') and
-- (i_size = 'large' or i_size = 'small')
-- ))) or
-- (i_manufact = i1.i_manufact and
-- ((i_category = 'Women' and
-- (i_color = 'coral' or i_color = 'peach') and
-- (i_units = 'N/A' or i_units = 'Dram') and
-- (i_size = 'large' or i_size = 'small')
-- ) or
-- (i_category = 'Women' and
-- (i_color = 'steel' or i_color = 'black') and
-- (i_units = 'Gross' or i_units = 'Gram') and
-- (i_size = 'extra large' or i_size = 'petite')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'white' or i_color = 'forest') and
-- (i_units = 'Bunch' or i_units = 'Ounce') and
-- (i_size = 'economy' or i_size = 'N/A')
-- ) or
-- (i_category = 'Men' and
-- (i_color = 'tomato' or i_color = 'turquoise') and
-- (i_units = 'Each' or i_units = 'Dozen') and
-- (i_size = 'large' or i_size = 'small')
-- )))) > 0
-- order by i_product_name
-- limit 100;
--
-- select dt.d_year
-- 	,item.i_brand_id brand_id
-- 	,item.i_brand brand
-- 	,sum(ss_ext_sales_price) ext_price
-- from date_dim dt
-- ,store_sales
-- ,item
-- where dt.d_date_sk = store_sales.ss_sold_date_sk
-- and store_sales.ss_item_sk = item.i_item_sk
-- and item.i_manager_id = 1
-- and dt.d_moy=12
-- and dt.d_year=1998
-- group by dt.d_year
-- 	,item.i_brand
-- 	,item.i_brand_id
-- order by dt.d_year
-- 	,ext_price desc
-- 	,brand_id
-- limit 100 ;
--
-- select * from
-- (select i_manufact_id,
-- sum(ss_sales_price) sum_sales,
-- avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
-- from item, store_sales, date_dim, store
-- where ss_item_sk = i_item_sk and
-- ss_sold_date_sk = d_date_sk and
-- ss_store_sk = s_store_sk and
-- d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
-- ((i_category in ('Books','Children','Electronics') and
-- i_class in ('personal','portable','reference','self-help') and
-- i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
-- 		'exportiunivamalg #9','scholaramalgamalg #9'))
-- or(i_category in ('Women','Music','Men') and
-- i_class in ('accessories','classical','fragrances','pants') and
-- i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
-- 		'importoamalg #1')))
-- group by i_manufact_id, d_qoy ) tmp1
-- where case when avg_quarterly_sales > 0
-- 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
-- 	else null end > 0.1
-- order by avg_quarterly_sales,
-- 	 sum_sales,
-- 	 i_manufact_id
-- limit 100;
--
select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.8203125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 27757.210000000006]
2024-03-07 14:43:04,075 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 14:43:04,081 - root - __init_conn_handle - INFO - connection successful
2024-03-07 14:43:04,082 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 14:43:04,083 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-07 15:04:22,199 - root - __init_conn_handle - INFO - connection successful
2024-03-07 15:04:22,285 - root - __init_conn_handle - INFO - connection successful
2024-03-07 15:04:22,332 - root - __init_conn_handle - INFO - connection successful
2024-03-07 15:04:22,385 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,418 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,474 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,488 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,502 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,515 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,527 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,540 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,553 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,565 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,578 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,591 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,604 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,616 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,629 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,641 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,654 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,666 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,679 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,691 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,704 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,716 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,729 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,741 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,753 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,765 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,777 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,790 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,802 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,815 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,827 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,839 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,852 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,864 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,877 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,889 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,901 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,913 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,925 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,938 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,950 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,962 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,975 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,987 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:22,999 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,011 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,024 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,036 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,048 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,061 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,073 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,086 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,098 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,111 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,124 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,136 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,148 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,161 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,173 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,185 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,198 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,211 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,223 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,235 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,248 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,260 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,272 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,285 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,297 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,310 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,323 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,335 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,348 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,360 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,373 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,386 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,405 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,421 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,436 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,449 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,462 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,475 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,488 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,501 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,514 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,527 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,540 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,553 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,566 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,581 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,595 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,609 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,622 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,635 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,647 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,660 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,673 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,686 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,700 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,713 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,727 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,740 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,753 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,765 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,778 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,791 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,804 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,817 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,830 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,843 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,856 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,869 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,882 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,894 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,907 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,919 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,932 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,944 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,956 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,968 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,981 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:23,993 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,018 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,034 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,040 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,043 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,046 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,049 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,052 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,055 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,058 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,061 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,064 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,067 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,070 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,073 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,076 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,079 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,082 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,085 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,088 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,091 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,094 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,097 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,100 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,104 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,107 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,110 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,120 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,129 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,131 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,133 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,135 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,137 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,139 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,140 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,148 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,155 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,158 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,177 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,187 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,191 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,193 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,201 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,207 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,210 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,211 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,223 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,240 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,245 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,247 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,265 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,290 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,297 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,300 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,325 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,332 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,335 - root - __execute - INFO - error sql :SELECT hypopg_display_index()
2024-03-07 15:04:24,343 - root - __init_conn_handle - INFO - connection successful
2024-03-07 15:04:24,343 - root - index_advisor_workload - INFO - Mcts started
2024-03-07 15:04:24,343 - root - generate_sorted_atomic_config - INFO - cnt num 1 queries:statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 0, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,343 - root - generate_sorted_atomic_config - INFO - cnt num 2 queries:statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0, table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,343 - root - generate_sorted_atomic_config - INFO - cnt num 3 queries:statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 0, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: item columns: i_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,343 - root - generate_sorted_atomic_config - INFO - cnt num 4 queries:statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,344 - root - generate_sorted_atomic_config - INFO - cnt num 5 queries:statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,344 - root - generate_sorted_atomic_config - INFO - cnt num 6 queries:statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,344 - root - generate_sorted_atomic_config - INFO - cnt num 7 queries:statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 0, table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,344 - root - generate_sorted_atomic_config - INFO - cnt num 8 queries:statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,344 - root - generate_sorted_atomic_config - INFO - cnt num 9 queries:statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 0] benefit: 0
2024-03-07 15:04:24,344 - root - complex_index_advisor - INFO - atomic_config_total :[(), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0,), (table: date_dim columns: d_date_sk index_type:  storage: 0,), (table: date_dim columns: d_quarter_name index_type:  storage: 0,), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 0, table: date_dim columns: d_date_sk index_type:  storage: 0, table: date_dim columns: d_quarter_name index_type:  storage: 0), (table: customer columns: c_customer_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0,), (table: customer columns: c_customer_sk index_type:  storage: 0, table: customer_address columns: ca_address_sk index_type:  storage: 0), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0,), (table: date_dim columns: d_date index_type:  storage: 0,), (table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 0, table: date_dim columns: d_date index_type:  storage: 0), (table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 0,), (table: item columns: i_manufact index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0,), (table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_year index_type:  storage: 0, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 0), (table: date_dim columns: d_month_seq index_type:  storage: 0,), (table: store_sales columns: ss_item_sk index_type:  storage: 0,), (table: date_dim columns: d_month_seq index_type:  storage: 0, table: store_sales columns: ss_item_sk index_type:  storage: 0), (table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0,), (table: customer_address columns: ca_address_sk index_type:  storage: 0, table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 0), (table: item columns: i_item_sk index_type:  storage: 0,), (table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 0,)],len==26
2024-03-07 15:04:25,843 - root - MCTS - INFO - mcts 300 >= 567.703125
2024-03-07 15:04:25,843 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,023 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,159 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,277 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,377 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,465 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,544 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,617 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,688 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,757 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,823 - root - monte_carlo_tree_search - INFO - ite_times monte_carlo_tree_search computation_budget :396.3339113202873
2024-03-07 15:04:26,887 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.4
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.4
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.4
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.4
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.4
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :7910.87
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :54162.37
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 15:04:26,888 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :5302.34
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select ss_customer_sk
 ,sum(act_sales) sumsales
 from (select ss_item_sk
 ,ss_ticket_number
 ,ss_customer_sk
 ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
 else (ss_quantity*ss_sales_price) end act_sales
 from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
 and sr_ticket_number = ss_ticket_number)
 ,reason
 where sr_reason_sk = r_reason_sk
 and r_reason_desc = 'reason 25') t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk, ss_ticket_number index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：11695.13，self.get_indexes_cost_of_query(query, tuple([index])) :11695.13
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :1304707.79
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,889 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :68028.79
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13617.94
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :70521.54
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :70521.54
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :42782.91
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: item columns: i_manufact index_type:  storage: 1.5，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,890 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,891 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :23784.44
2024-03-07 15:04:26,892 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0]
2024-03-07 15:04:26,892 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_manufact index_type:  storage: 1.5
2024-03-07 15:04:26,892 - root - filter_low_benefit_index - INFO - table: item columns: i_manufact index_type:  storage: 1.5 has benefit of 70247064.96000001
2024-03-07 15:04:26,893 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 15:04:26,893 - root - filter_low_benefit_index - INFO - filter low benefit index for table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 15:04:26,893 - root - filter_low_benefit_index - INFO - table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625 has benefit of 42854.96999999881
2024-03-07 15:04:26,893 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 15:04:26,893 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125
2024-03-07 15:04:26,893 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125 has benefit of 27738.630000010133
2024-03-07 15:04:26,894 - root - is_positive_query - INFO - index ：table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,894 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :70521.54
2024-03-07 15:04:26,894 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 15:04:26,894 - root - filter_low_benefit_index - INFO - filter low benefit index for table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125
2024-03-07 15:04:26,894 - root - filter_low_benefit_index - INFO - table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125 has benefit of 3721.7100000083447
2024-03-07 15:04:26,894 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,894 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :55861.02
2024-03-07 15:04:26,894 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,894 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 15:04:26,894 - root - is_positive_query - INFO - index ：table: date_dim columns: d_year index_type:  storage: 1.8125，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :68384.94
2024-03-07 15:04:26,895 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0, statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0]
2024-03-07 15:04:26,895 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 15:04:26,895 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_year index_type:  storage: 1.8125 has benefit of 6182.730000004172
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - index ：table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :70521.54
2024-03-07 15:04:26,895 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 15:04:26,895 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 15:04:26,895 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375 has benefit of 1968.530000001192
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.4
2024-03-07 15:04:26,895 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - index ：table: date_dim columns: d_month_seq index_type:  storage: 1.8125，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :70521.54
2024-03-07 15:04:26,896 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-07 15:04:26,896 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 15:04:26,896 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_month_seq index_type:  storage: 1.8125 has benefit of 2807.1200000047684
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9878.9
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :56874.89
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48157.31
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,896 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :13751.2
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :70521.54
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date_sk index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,897 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0, statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0]
2024-03-07 15:04:26,897 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 15:04:26,897 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date_sk index_type:  storage: 1.8125 has benefit of 1660.8299999982119
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.4
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :46116.55
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :70051.86
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,897 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70521.54，self.get_indexes_cost_of_query(query, tuple([index])) :70521.54
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: date_dim columns: d_date index_type:  storage: 1.8125，query :statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：25807.16，self.get_indexes_cost_of_query(query, tuple([index])) :25807.16
2024-03-07 15:04:26,898 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0]
2024-03-07 15:04:26,898 - root - filter_low_benefit_index - INFO - filter low benefit index for table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 15:04:26,898 - root - filter_low_benefit_index - INFO - table: date_dim columns: d_date index_type:  storage: 1.8125 has benefit of 2040.7600000053644
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：9879.4，self.get_indexes_cost_of_query(query, tuple([index])) :9879.15
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: customer columns: c_customer_sk index_type:  storage: 2.484375, table: customer_address columns: ca_address_sk index_type:  storage: 1.2421875] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：57884.08，self.get_indexes_cost_of_query(query, tuple([index])) :57884.08
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：48157.31，self.get_indexes_cost_of_query(query, tuple([index])) :48096.06
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：71551772.75，self.get_indexes_cost_of_query(query, tuple([index])) :71551772.75
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：70051.86，self.get_indexes_cost_of_query(query, tuple([index])) :69930.36
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - index ：table: item columns: i_item_sk index_type:  storage: 0.4453125，query :statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_item_sk index_type:  storage: 71.765625, table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 0
2024-03-07 15:04:26,898 - root - is_positive_query - INFO - self.get_origin_cost_of_query(query ：14402.34，self.get_indexes_cost_of_query(query, tuple([index])) :14402.34
2024-03-07 15:04:26,898 - root - filter_low_benefit_index - INFO - positive_queries for [statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: catalog_sales columns: cs_item_sk, cs_bill_customer_sk index_type:  storage: 57.46875, table: store_sales columns: ss_item_sk, ss_customer_sk index_type:  storage: 114.828125, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_date index_type:  storage: 1.8125, table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 0, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: date_dim columns: d_year index_type:  storage: 1.8125, table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125] benefit: 0]
2024-03-07 15:04:26,899 - root - filter_low_benefit_index - INFO - filter low benefit index for table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 15:04:26,899 - root - filter_low_benefit_index - INFO - table: item columns: i_item_sk index_type:  storage: 0.4453125 has benefit of 183.0
2024-03-07 15:04:26,904 - root - __init_conn_handle - INFO - connection successful
2024-03-07 15:04:26,978 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,979 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,980 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13387>btree_date_dim_d_quarter_name"', 'store_sales_pkey', 'catalog_sales_pkey', '"<13389>btree_date_dim_d_date_sk"', 'store_pkey', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,981 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,982 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"', 'customer_pkey', 'customer_address_pkey', 'store_pkey']
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,983 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,984 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13390>btree_date_dim_d_date"', '"<13383>btree_catalog_sales_cs_sold_date_sk"', '"<13391>btree_item_i_item_sk"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,985 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13382>btree_item_i_manufact"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13386>btree_date_dim_d_year"', '"<13385>btree_store_sales_ss_sold_date_sk_ss_item_sk"']
2024-03-07 15:04:26,986 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['store_sales_pkey', '"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,987 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,988 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13384>btree_store_sales_ss_store_sk_ss_sold_date_sk"', 'household_demographics_pkey', 'customer_address_pkey', 'customer_pkey']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):True
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - append_positive_query index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,989 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,990 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,990 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,990 - root - recalculate_cost_for_opt_indexes - INFO - used_index_names :['"<13388>btree_date_dim_d_month_seq"']
2024-03-07 15:04:26,990 - root - recalculate_cost_for_opt_indexes - INFO - index.match_index_name(index_name):False
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_manufact index_type:  storage: 1.5
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select distinct(i_product_name)
 from item i1
 where i_manufact_id between 851 and 851+40
 and (select count(*) as item_cnt
 from item
 where (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'rose' or i_color = 'lemon') and
 (i_units = 'Unknown' or i_units = 'Oz') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'deep' or i_color = 'smoke') and
 (i_units = 'Pound' or i_units = 'Pallet') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'pink' or i_color = 'aquamarine') and
 (i_units = 'Ton' or i_units = 'Tsp') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'snow' or i_color = 'cornflower') and
 (i_units = 'Case' or i_units = 'Lb') and
 (i_size = 'large' or i_size = 'small')
 ))) or
 (i_manufact = i1.i_manufact and
 ((i_category = 'Women' and
 (i_color = 'coral' or i_color = 'peach') and
 (i_units = 'N/A' or i_units = 'Dram') and
 (i_size = 'large' or i_size = 'small')
 ) or
 (i_category = 'Women' and
 (i_color = 'steel' or i_color = 'black') and
 (i_units = 'Gross' or i_units = 'Gram') and
 (i_size = 'extra large' or i_size = 'petite')
 ) or
 (i_category = 'Men' and
 (i_color = 'white' or i_color = 'forest') and
 (i_units = 'Bunch' or i_units = 'Ounce') and
 (i_size = 'economy' or i_size = 'N/A')
 ) or
 (i_category = 'Men' and
 (i_color = 'tomato' or i_color = 'turquoise') and
 (i_units = 'Each' or i_units = 'Dozen') and
 (i_size = 'large' or i_size = 'small')
 )))) > 0
 order by i_product_name
 limit 100; frequency: 1.0 index_list: [table: item columns: i_manufact index_type:  storage: 1.5] benefit: 70247064.96]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select c_last_name
 ,c_first_name
 ,ca_city
 ,bought_city
 ,ss_ticket_number
 ,extended_price
 ,extended_tax
 ,list_price
 from (select ss_ticket_number
 ,ss_customer_sk
 ,ca_city bought_city
 ,sum(ss_ext_sales_price) extended_price
 ,sum(ss_ext_list_price) list_price
 ,sum(ss_ext_tax) extended_tax
 from store_sales
 ,date_dim
 ,store
 ,household_demographics
 ,customer_address
 where store_sales.ss_sold_date_sk = date_dim.d_date_sk
 and store_sales.ss_store_sk = store.s_store_sk
 and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
 and store_sales.ss_addr_sk = customer_address.ca_address_sk
 and date_dim.d_dom between 1 and 2
 and (household_demographics.hd_dep_count = 6 or
 household_demographics.hd_vehicle_count= 1)
 and date_dim.d_year in (1998,1998+1,1998+2)
 and store.s_city in ('Pleasant Hill','Riverside')
 group by ss_ticket_number
 ,ss_customer_sk
 ,ss_addr_sk,ca_city) dn
 ,customer
 ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
 and customer.c_current_addr_sk = current_addr.ca_address_sk
 and current_addr.ca_city <> bought_city
 order by c_last_name
 ,ss_ticket_number
 limit 100; frequency: 1.0 index_list: [table: store_sales columns: ss_store_sk, ss_sold_date_sk index_type:  storage: 114.828125] benefit: 27738.62999999999]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15283.150000000001]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_year index_type:  storage: 1.8125
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
 and ss_item_sk = i_item_sk
 and i_manager_id=66
 and d_moy=12
 and d_year=2002
 and ss_customer_sk = c_customer_sk
 and c_current_addr_sk = ca_address_sk
 and substr(ca_zip,1,5) <> substr(s_zip,1,5)
 and ss_store_sk = s_store_sk
 group by i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
 order by ext_price desc
 ,i_brand
 ,i_brand_id
 ,i_manufact_id
 ,i_manufact
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 27511.300000000003, statement: select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
 ,store_sales
 ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 and store_sales.ss_item_sk = item.i_item_sk
 and item.i_manager_id = 1
 and dt.d_moy=12
 and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 ; frequency: 1.0 index_list: [table: store_sales columns: ss_sold_date_sk, ss_item_sk index_type:  storage: 114.828125, table: date_dim columns: d_year index_type:  storage: 1.8125] benefit: 15283.150000000001]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 1969.2799999999997]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_month_seq index_type:  storage: 1.8125
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select * from
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1217,1217+1,1217+2,1217+3,1217+4,1217+5,1217+6,1217+7,1217+8,1217+9,1217+10,1217+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 784.3999999999996, statement: select
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "interval '30' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-interval '60' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-interval '90' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-interval '120' day"
 ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 120) then 1 else 0 end) as ">interval '120' day"
from
 web_sales
 ,warehouse
 ,ship_mode
 ,web_site
 ,date_dim
where
 d_month_seq between 1186 and 1186 + 11
and ws_ship_date_sk = d_date_sk
and ws_warehouse_sk = w_warehouse_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and ws_web_site_sk = web_site_sk
group by
 substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
order by substr(w_warehouse_name,1,20)
 ,sm_type
 ,web_name
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_month_seq index_type:  storage: 1.8125] benefit: 2022.7200000000012]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date_sk index_type:  storage: 1.8125
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 1969.2799999999997]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: date_dim columns: d_date index_type:  storage: 1.8125
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index : table: item columns: i_item_sk index_type:  storage: 0.4453125
2024-03-07 15:04:26,990 - root - filter_no_benefit_indexes - INFO - index.get_positive_queries() :[statement: select i_item_id
 ,i_item_desc
 ,s_state
 ,count(ss_quantity) as store_sales_quantitycount
 ,avg(ss_quantity) as store_sales_quantityave
 ,stddev_samp(ss_quantity) as store_sales_quantitystdev
 ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
 ,count(sr_return_quantity) as store_returns_quantitycount
 ,avg(sr_return_quantity) as store_returns_quantityave
 ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
 ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
 ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
 ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
 ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where d1.d_quarter_name = '1998Q1'
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
 ,i_item_desc
 ,s_state
 order by i_item_id
 ,i_item_desc
 ,s_state
limit 100; frequency: 1.0 index_list: [table: date_dim columns: d_quarter_name index_type:  storage: 2.0859375, table: date_dim columns: d_date_sk index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 1969.2799999999997, statement: select i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 ,sum(cs_ext_sales_price) as itemrevenue
 ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
 (partition by i_class) as revenueratio
 from	catalog_sales
 ,item
 ,date_dim
 where cs_item_sk = i_item_sk
 and i_category in ('Books', 'Women', 'Home')
 and cs_sold_date_sk = d_date_sk
 and d_date between cast('1999-06-15' as date)
 				and (cast('1999-06-15' as date) + interval '30' day)
 group by i_item_id
 ,i_item_desc
 ,i_category
 ,i_class
 ,i_current_price
 order by i_category
 ,i_class
 ,i_item_id
 ,i_item_desc
 ,revenueratio
limit 100; frequency: 1.0 index_list: [table: catalog_sales columns: cs_sold_date_sk index_type:  storage: 35.9140625, table: date_dim columns: d_date index_type:  storage: 1.8125, table: item columns: i_item_sk index_type:  storage: 0.4453125] benefit: 44571.899999999994]
2024-03-07 15:04:26,991 - root - display_advise_indexes_info - INFO - filter advised indexes by using max-index-storage and max-index-num.
2024-03-07 15:04:26,997 - root - __init_conn_handle - INFO - connection successful
2024-03-07 15:04:26,997 - root - generate_redundant_useless_indexes - INFO - len of created_indexes :24
2024-03-07 15:04:26,997 - root - generate_redundant_useless_indexes - INFO - created_indexes :[public, call_center, call_center_pkey, cc_call_center_sk, CREATE UNIQUE INDEX call_center_pkey ON public.call_center USING btree (cc_call_center_sk)), public, catalog_page, catalog_page_pkey, cp_catalog_page_sk, CREATE UNIQUE INDEX catalog_page_pkey ON public.catalog_page USING btree (cp_catalog_page_sk)), public, catalog_returns, catalog_returns_pkey, cr_item_sk, cr_order_number, CREATE UNIQUE INDEX catalog_returns_pkey ON public.catalog_returns USING btree (cr_item_sk, cr_order_number)), public, catalog_sales, catalog_sales_pkey, cs_item_sk, cs_order_number, CREATE UNIQUE INDEX catalog_sales_pkey ON public.catalog_sales USING btree (cs_item_sk, cs_order_number)), public, customer, customer_pkey, c_customer_sk, CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (c_customer_sk)), public, customer_address, customer_address_pkey, ca_address_sk, CREATE UNIQUE INDEX customer_address_pkey ON public.customer_address USING btree (ca_address_sk)), public, customer_demographics, customer_demographics_pkey, cd_demo_sk, CREATE UNIQUE INDEX customer_demographics_pkey ON public.customer_demographics USING btree (cd_demo_sk)), public, date_dim, date_dim_pkey, d_date_sk, CREATE UNIQUE INDEX date_dim_pkey ON public.date_dim USING btree (d_date_sk)), public, household_demographics, household_demographics_pkey, hd_demo_sk, CREATE UNIQUE INDEX household_demographics_pkey ON public.household_demographics USING btree (hd_demo_sk)), public, income_band, income_band_pkey, ib_income_band_sk, CREATE UNIQUE INDEX income_band_pkey ON public.income_band USING btree (ib_income_band_sk)), public, inventory, inventory_pkey, inv_date_sk, inv_item_sk, inv_warehouse_sk, CREATE UNIQUE INDEX inventory_pkey ON public.inventory USING btree (inv_date_sk, inv_item_sk, inv_warehouse_sk)), public, item, item_pkey, i_item_sk, CREATE UNIQUE INDEX item_pkey ON public.item USING btree (i_item_sk)), public, promotion, promotion_pkey, p_promo_sk, CREATE UNIQUE INDEX promotion_pkey ON public.promotion USING btree (p_promo_sk)), public, reason, reason_pkey, r_reason_sk, CREATE UNIQUE INDEX reason_pkey ON public.reason USING btree (r_reason_sk)), public, ship_mode, ship_mode_pkey, sm_ship_mode_sk, CREATE UNIQUE INDEX ship_mode_pkey ON public.ship_mode USING btree (sm_ship_mode_sk)), public, store, store_pkey, s_store_sk, CREATE UNIQUE INDEX store_pkey ON public.store USING btree (s_store_sk)), public, store_returns, store_returns_pkey, sr_item_sk, sr_ticket_number, CREATE UNIQUE INDEX store_returns_pkey ON public.store_returns USING btree (sr_item_sk, sr_ticket_number)), public, store_sales, store_sales_pkey, ss_item_sk, ss_ticket_number, CREATE UNIQUE INDEX store_sales_pkey ON public.store_sales USING btree (ss_item_sk, ss_ticket_number)), public, time_dim, time_dim_pkey, t_time_sk, CREATE UNIQUE INDEX time_dim_pkey ON public.time_dim USING btree (t_time_sk)), public, warehouse, warehouse_pkey, w_warehouse_sk, CREATE UNIQUE INDEX warehouse_pkey ON public.warehouse USING btree (w_warehouse_sk)), public, web_page, web_page_pkey, wp_web_page_sk, CREATE UNIQUE INDEX web_page_pkey ON public.web_page USING btree (wp_web_page_sk)), public, web_returns, web_returns_pkey, wr_item_sk, wr_order_number, CREATE UNIQUE INDEX web_returns_pkey ON public.web_returns USING btree (wr_item_sk, wr_order_number)), public, web_sales, web_sales_pkey, ws_item_sk, ws_order_number, CREATE UNIQUE INDEX web_sales_pkey ON public.web_sales USING btree (ws_item_sk, ws_order_number)), public, web_site, web_site_pkey, web_site_sk, CREATE UNIQUE INDEX web_site_pkey ON public.web_site USING btree (web_site_sk))]
2024-03-18 14:02:02,081 - root - __execute - WARNING - Found prepared statement "prepare_5" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,084 - root - __execute - WARNING - Found prepared statement "prepare_5" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,087 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,088 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,099 - root - __execute - WARNING - Found prepared statement "prepare_10" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,100 - root - __execute - WARNING - Found prepared statement "prepare_10" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,102 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,102 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,167 - root - __execute - WARNING - Found prepared statement "prepare_21" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,168 - root - __execute - WARNING - Found prepared statement "prepare_21" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,214 - root - __execute - WARNING - Found prepared statement "prepare_31" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,215 - root - __execute - WARNING - Found prepared statement "prepare_31" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,216 - root - __execute - WARNING - Found prepared statement "prepare_32" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,216 - root - __execute - WARNING - Found prepared statement "prepare_32" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,219 - root - __execute - WARNING - Found prepared statement "prepare_34" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,219 - root - __execute - WARNING - Found prepared statement "prepare_34" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,244 - root - __execute - WARNING - Found prepared statement "prepare_41" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,245 - root - __execute - WARNING - Found prepared statement "prepare_41" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,282 - root - __execute - WARNING - Found prepared statement "prepare_53" does not exist
 while executing SQL statement.
2024-03-18 14:02:02,283 - root - __execute - WARNING - Found prepared statement "prepare_53" does not exist
 while executing SQL statement.
2024-07-30 10:14:10,818 - root - generate_query_placeholder_indexes - WARNING - Found 'NoneType' object has no attribute 'normalized' while parsing SQL statement.
2024-07-30 10:14:11,141 - root - generate_query_placeholder_indexes - WARNING - Found 'FROM' while parsing SQL statement.
2024-07-30 15:52:24,550 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 15:52:24,551 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 15:53:11,643 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 15:53:11,643 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 15:54:09,703 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 15:54:09,703 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 15:57:13,599 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 15:57:13,600 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:08:58,104 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:08:58,105 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:08:58,179 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:08:58,179 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:13:30,561 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:13:30,562 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:13:30,642 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 16:13:30,642 - root - __execute - WARNING - Found prepared statement "prepare_11" does not exist
 while executing SQL statement.
2024-07-30 19:46:37,672 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
2024-07-30 19:46:37,673 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
2024-07-30 19:48:46,179 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
2024-07-30 19:48:46,180 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
2024-07-30 19:48:46,229 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
2024-07-30 19:48:46,230 - root - __execute - WARNING - Found prepared statement "prepare_7" does not exist
 while executing SQL statement.
